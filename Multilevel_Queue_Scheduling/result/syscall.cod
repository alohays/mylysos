; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.42 

	TITLE	c:\Develop\MyoksOS\syscall.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_BSS	SEGMENT
?result@?1??Sysp_SERVICE_CALL_MANAGER@@9@9 DD 01H DUP (?) ; `Sysp_SERVICE_CALL_MANAGER'::`2'::result
_BSS	ENDS
PUBLIC	??_C@_0CM@HLOPFLLL@SyspSetupSysCallgate?$CI?$CJ?5returned?5@ ; `string'
PUBLIC	_SysInitializeSyscall
EXTRN	_MmAllocateNonCachedMemory:PROC
EXTRN	_CrtPrintf:PROC
_BSS	SEGMENT
_m_pSyscallStack DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0CM@HLOPFLLL@SyspSetupSysCallgate?$CI?$CJ?5returned?5@
; File c:\develop\myoksos\syscall.c
CONST	SEGMENT
??_C@_0CM@HLOPFLLL@SyspSetupSysCallgate?$CI?$CJ?5returned?5@ DB 'SyspSetu'
	DB	'pSysCallgate() returned an error.', 0dH, 0aH, 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT _SysInitializeSyscall
_TEXT	SEGMENT
_SysInitializeSyscall PROC				; COMDAT

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 15   : 	if(!SyspSetupSysCallgate()){

  00009	e8 00 00 00 00	 call	 _SyspSetupSysCallgate
  0000e	85 c0		 test	 eax, eax
  00010	75 11		 jne	 SHORT $LN2@SysInitial

; 16   : 		DbgPrint("SyspSetupSysCallgate() returned an error.\r\n");

  00012	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@HLOPFLLL@SyspSetupSysCallgate?$CI?$CJ?5returned?5@
  00017	e8 00 00 00 00	 call	 _CrtPrintf
  0001c	83 c4 04	 add	 esp, 4

; 17   : 		return FALSE;

  0001f	33 c0		 xor	 eax, eax
  00021	eb 24		 jmp	 SHORT $LN3@SysInitial
$LN2@SysInitial:

; 18   : 	}
; 19   : 
; 20   : 
; 21   : 	//시스템 콜 호출시에 커널 영역에서 사용될 스택을 설정
; 22   : 	m_pSyscallStack = MmAllocateNonCachedMemory(DEFAULT_STACK_SIZE);

  00023	68 00 00 01 00	 push	 65536			; 00010000H
  00028	e8 00 00 00 00	 call	 _MmAllocateNonCachedMemory
  0002d	83 c4 04	 add	 esp, 4
  00030	a3 00 00 00 00	 mov	 DWORD PTR _m_pSyscallStack, eax

; 23   : 	if(m_pSyscallStack == NULL) return FALSE;

  00035	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _m_pSyscallStack, 0
  0003c	75 04		 jne	 SHORT $LN1@SysInitial
  0003e	33 c0		 xor	 eax, eax
  00040	eb 05		 jmp	 SHORT $LN3@SysInitial
$LN1@SysInitial:

; 24   : 
; 25   : 	return TRUE;

  00042	b8 01 00 00 00	 mov	 eax, 1
$LN3@SysInitial:

; 26   : }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_SysInitializeSyscall ENDP
_TEXT	ENDS
PUBLIC	_SysGetSyscallStackPtr
; Function compile flags: /Odtp /ZI
;	COMDAT _SysGetSyscallStackPtr
_TEXT	SEGMENT
_SysGetSyscallStackPtr PROC				; COMDAT

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 30   : 	return (VOID *)m_pSyscallStack;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_pSyscallStack

; 31   : }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
_SysGetSyscallStackPtr ENDP
_TEXT	ENDS
PUBLIC	_SysGetSyscallStackSize
; Function compile flags: /Odtp /ZI
;	COMDAT _SysGetSyscallStackSize
_TEXT	SEGMENT
_SysGetSyscallStackSize PROC				; COMDAT

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 35   : 	return DEFAULT_STACK_SIZE;

  00009	b8 00 00 01 00	 mov	 eax, 65536		; 00010000H

; 36   : }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
_SysGetSyscallStackSize ENDP
_TEXT	ENDS
EXTRN	_m_GdtTable:BYTE
; Function compile flags: /Odtp /ZI
;	COMDAT _SyspSetupSysCallgate
_TEXT	SEGMENT
_SyspSetupSysCallgate PROC				; COMDAT

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 70   : ENTER_CRITICAL_SECTION();

  00009	9c		 pushfd
  0000a	fa		 cli

; 71   : 	m_GdtTable[SYSCALL_GATE>>3].count		= 1;

  0000b	c6 05 4c 00 00
	00 01		 mov	 BYTE PTR _m_GdtTable+76, 1

; 72   : 	m_GdtTable[SYSCALL_GATE>>3].type		= 0xec;

  00012	c6 05 4d 00 00
	00 ec		 mov	 BYTE PTR _m_GdtTable+77, 236 ; 000000ecH

; 73   : 	m_GdtTable[SYSCALL_GATE>>3].selector	= KERNEL_CS;

  00019	66 c7 05 4a 00
	00 00 08 00	 mov	 WORD PTR _m_GdtTable+74, 8

; 74   : 
; 75   : 	m_GdtTable[SYSCALL_GATE>>3].offset_1	=(BYTE)	(((int)Sysp_SERVICE_CALL_MANAGER) & 0x000000ff);

  00022	b8 00 00 00 00	 mov	 eax, OFFSET _Sysp_SERVICE_CALL_MANAGER
  00027	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0002c	a2 48 00 00 00	 mov	 BYTE PTR _m_GdtTable+72, al

; 76   : 	m_GdtTable[SYSCALL_GATE>>3].offset_2	=(BYTE)((((int)Sysp_SERVICE_CALL_MANAGER) & 0x0000ff00) >> 8);

  00031	b8 00 00 00 00	 mov	 eax, OFFSET _Sysp_SERVICE_CALL_MANAGER
  00036	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  0003b	c1 f8 08	 sar	 eax, 8
  0003e	a2 49 00 00 00	 mov	 BYTE PTR _m_GdtTable+73, al

; 77   : 	m_GdtTable[SYSCALL_GATE>>3].offset_3	=(BYTE)((((int)Sysp_SERVICE_CALL_MANAGER) & 0x00ff0000) >> 16);

  00043	b8 00 00 00 00	 mov	 eax, OFFSET _Sysp_SERVICE_CALL_MANAGER
  00048	25 00 00 ff 00	 and	 eax, 16711680		; 00ff0000H
  0004d	c1 f8 10	 sar	 eax, 16			; 00000010H
  00050	a2 4e 00 00 00	 mov	 BYTE PTR _m_GdtTable+78, al

; 78   : 	m_GdtTable[SYSCALL_GATE>>3].offset_4	=(BYTE)((((int)Sysp_SERVICE_CALL_MANAGER) & 0xff000000) >> 24);

  00055	b8 00 00 00 00	 mov	 eax, OFFSET _Sysp_SERVICE_CALL_MANAGER
  0005a	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  0005f	c1 e8 18	 shr	 eax, 24			; 00000018H
  00062	a2 4f 00 00 00	 mov	 BYTE PTR _m_GdtTable+79, al

; 79   : EXIT_CRITICAL_SECTION();

  00067	9d		 popfd

; 80   : 
; 81   : 	return TRUE;

  00068	b8 01 00 00 00	 mov	 eax, 1

; 82   : }

  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
_SyspSetupSysCallgate ENDP
_TEXT	ENDS
_BSS	SEGMENT
?call_msg@?1??Sysp_SERVICE_CALL_MANAGER@@9@9 DD 01H DUP (?) ; `Sysp_SERVICE_CALL_MANAGER'::`2'::call_msg
; Function compile flags: /Odtp /ZI
_BSS	ENDS
;	COMDAT _Sysp_SERVICE_CALL_MANAGER
_TEXT	SEGMENT
tv64 = -68						; size = 4
_Sysp_SERVICE_CALL_MANAGER PROC				; COMDAT

; 42   : 	static PSYSCALL_MSG call_msg;
; 43   : 	static KBD_KEY_DATA key_data;
; 44   : 	static int result=0;
; 45   : 
; 46   : 	_asm {
; 47   : 		mov		eax, [esp+8]

  00000	8b 44 24 08	 mov	 eax, DWORD PTR [esp+8]

; 48   : 		mov		call_msg, eax

  00004	a3 00 00 00 00	 mov	 DWORD PTR ?call_msg@?1??Sysp_SERVICE_CALL_MANAGER@@9@9, eax

; 49   : 
; 50   : 		pushad

  00009	60		 pushad

; 51   : 	}
; 52   : 
; 53   : 	switch(call_msg->syscall_type){

  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?call_msg@?1??Sysp_SERVICE_CALL_MANAGER@@9@9
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	89 4d bc	 mov	 DWORD PTR tv64[ebp], ecx

; 54   : 		default:
; 55   : 			break;
; 56   : 	}
; 57   : 
; 58   : 	_asm {
; 59   : 		popad

  00014	61		 popad

; 60   : 		mov		eax,result

  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?result@?1??Sysp_SERVICE_CALL_MANAGER@@9@9

; 61   : 		ret		4

  0001a	c2 04 00	 ret	 4
_Sysp_SERVICE_CALL_MANAGER ENDP
_TEXT	ENDS
END
