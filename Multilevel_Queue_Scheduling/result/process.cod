; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.42 

	TITLE	c:\Develop\MyoksOS\process.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0CO@KFBIJEKH@PspCreateSystemProcess?$CI?$CJ?5returne@ ; `string'
PUBLIC	_PskInitializeProcessManager
EXTRN	_CrtPrintf:PROC
_BSS	SEGMENT
_lowQ	DB	0cH DUP (?)
_normalQ DB	0cH DUP (?)
_highQ	DB	0cH DUP (?)
_current_schedule_priority DD 01H DUP (?)
_m_TickCount DD	01H DUP (?)
_m_bShowTSWatchdogClock DD 01H DUP (?)
_m_ThreadCuttingList DB 07bH DUP (?)
	ALIGN	4

_m_ProcessCuttingList DB 07bH DUP (?)
	ALIGN	4

_m_ProcMgrBlk DB 010H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0CO@KFBIJEKH@PspCreateSystemProcess?$CI?$CJ?5returne@
; File c:\develop\myoksos\process.c
CONST	SEGMENT
??_C@_0CO@KFBIJEKH@PspCreateSystemProcess?$CI?$CJ?5returne@ DB 'PspCreate'
	DB	'SystemProcess() returned an error.', 0dH, 0aH, 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT _PskInitializeProcessManager
_TEXT	SEGMENT
_PskInitializeProcessManager PROC			; COMDAT

; 115  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 116  : 	//모든 변수 초기화
; 117  : 	m_ProcMgrBlk.process_count		= 0;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _m_ProcMgrBlk, 0

; 118  : 	m_ProcMgrBlk.next_process_id	= 0;

  00013	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR _m_ProcMgrBlk+4, 0

; 119  : 	m_ProcMgrBlk.pt_current_thread	= 0;

  0001d	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR _m_ProcMgrBlk+8, 0

; 120  : 	m_ProcMgrBlk.pt_head_process	= NULL;

  00027	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR _m_ProcMgrBlk+12, 0

; 121  : 
; 122  : 	m_ProcessCuttingList.count		= 0;

  00031	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _m_ProcessCuttingList, 0

; 123  : 	m_ProcessCuttingList.head		= 0;

  00038	c6 05 01 00 00
	00 00		 mov	 BYTE PTR _m_ProcessCuttingList+1, 0

; 124  : 	m_ProcessCuttingList.tail		= 0;

  0003f	c6 05 02 00 00
	00 00		 mov	 BYTE PTR _m_ProcessCuttingList+2, 0

; 125  : 
; 126  : 	m_ThreadCuttingList.count		= 0;

  00046	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _m_ThreadCuttingList, 0

; 127  : 	m_ThreadCuttingList.head		= 0;

  0004d	c6 05 01 00 00
	00 00		 mov	 BYTE PTR _m_ThreadCuttingList+1, 0

; 128  : 	m_ThreadCuttingList.tail		= 0;

  00054	c6 05 02 00 00
	00 00		 mov	 BYTE PTR _m_ThreadCuttingList+2, 0

; 129  : 
; 130  : 	m_bShowTSWatchdogClock			= TRUE;

  0005b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _m_bShowTSWatchdogClock, 1

; 131  : 	m_TickCount						= 0;

  00065	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _m_TickCount, 0

; 132  : 
; 133  : 	// 과제1을 위한 코드 추가!!!!!!!!
; 134  : 	current_schedule_priority		= PRIORITY_HIGH;

  0006f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _current_schedule_priority, 0

; 135  : 	
; 136  : 	highQ.count = 0;

  00079	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _highQ, 0

; 137  : 	highQ.end = NULL;

  00083	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR _highQ+8, 0

; 138  : 	highQ.front = NULL;

  0008d	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR _highQ+4, 0

; 139  : 
; 140  : 	normalQ.count = 0;

  00097	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _normalQ, 0

; 141  : 	normalQ.end = NULL;

  000a1	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR _normalQ+8, 0

; 142  : 	normalQ.front = NULL;

  000ab	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR _normalQ+4, 0

; 143  : 
; 144  : 	lowQ.count = 0;

  000b5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _lowQ, 0

; 145  : 	lowQ.end = NULL;

  000bf	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR _lowQ+8, 0

; 146  : 	lowQ.front = NULL;

  000c9	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR _lowQ+4, 0

; 147  : 
; 148  : 	// !!!!!!!!
; 149  : 
; 150  : 	if(!PspCreateSystemProcess()) {

  000d3	e8 00 00 00 00	 call	 _PspCreateSystemProcess
  000d8	85 c0		 test	 eax, eax
  000da	75 11		 jne	 SHORT $LN1@PskInitial

; 151  : 		DbgPrint("PspCreateSystemProcess() returned an error.\r\n");

  000dc	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@KFBIJEKH@PspCreateSystemProcess?$CI?$CJ?5returne@
  000e1	e8 00 00 00 00	 call	 _CrtPrintf
  000e6	83 c4 04	 add	 esp, 4

; 152  : 		return FALSE;

  000e9	33 c0		 xor	 eax, eax
  000eb	eb 05		 jmp	 SHORT $LN2@PskInitial
$LN1@PskInitial:

; 153  : 	}
; 154  : 
; 155  : 	return TRUE;

  000ed	b8 01 00 00 00	 mov	 eax, 1
$LN2@PskInitial:

; 156  : }

  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi
  000f4	5b		 pop	 ebx
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c3		 ret	 0
_PskInitializeProcessManager ENDP
_TEXT	ENDS
PUBLIC	_PsCreateProcess
EXTRN	_MmAllocateNonCachedMemory:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT _PsCreateProcess
_TEXT	SEGMENT
_pProcess$ = -4						; size = 4
_ProcessHandle$ = 8					; size = 4
_PsCreateProcess PROC					; COMDAT

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 180  : 	PPROCESS_CONTROL_BLOCK pProcess;
; 181  : 
; 182  : 	pProcess = MmAllocateNonCachedMemory(sizeof(PROCESS_CONTROL_BLOCK));

  00009	6a 18		 push	 24			; 00000018H
  0000b	e8 00 00 00 00	 call	 _MmAllocateNonCachedMemory
  00010	83 c4 04	 add	 esp, 4
  00013	89 45 fc	 mov	 DWORD PTR _pProcess$[ebp], eax

; 183  : 	if(pProcess == NULL) return FALSE;

  00016	83 7d fc 00	 cmp	 DWORD PTR _pProcess$[ebp], 0
  0001a	75 04		 jne	 SHORT $LN2@PsCreatePr
  0001c	33 c0		 xor	 eax, eax
  0001e	eb 5c		 jmp	 SHORT $LN3@PsCreatePr
$LN2@PsCreatePr:

; 184  : 
; 185  : 	pProcess->process_id		= PspGetNextProcessID();

  00020	e8 00 00 00 00	 call	 _PspGetNextProcessID
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _pProcess$[ebp]
  00028	89 01		 mov	 DWORD PTR [ecx], eax

; 186  : 	pProcess->process_handle	= (HANDLE)pProcess;

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _pProcess$[ebp]
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _pProcess$[ebp]
  00030	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 187  : 	pProcess->pt_next_process	= NULL;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _pProcess$[ebp]
  00036	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 188  : 	pProcess->thread_count		= 0;

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _pProcess$[ebp]
  00040	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 189  : 	pProcess->next_thread_id	= 0;

  00047	8b 45 fc	 mov	 eax, DWORD PTR _pProcess$[ebp]
  0004a	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 190  : 	pProcess->pt_head_thread	= NULL;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _pProcess$[ebp]
  00054	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 191  : 	if(!PspAddNewProcess((HANDLE)pProcess)) return FALSE;

  0005b	8b 45 fc	 mov	 eax, DWORD PTR _pProcess$[ebp]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _PspAddNewProcess
  00064	83 c4 04	 add	 esp, 4
  00067	85 c0		 test	 eax, eax
  00069	75 04		 jne	 SHORT $LN1@PsCreatePr
  0006b	33 c0		 xor	 eax, eax
  0006d	eb 0d		 jmp	 SHORT $LN3@PsCreatePr
$LN1@PsCreatePr:

; 192  : 
; 193  : 	*ProcessHandle = pProcess;

  0006f	8b 45 08	 mov	 eax, DWORD PTR _ProcessHandle$[ebp]
  00072	8b 4d fc	 mov	 ecx, DWORD PTR _pProcess$[ebp]
  00075	89 08		 mov	 DWORD PTR [eax], ecx

; 194  : 
; 195  : 	return TRUE;

  00077	b8 01 00 00 00	 mov	 eax, 1
$LN3@PsCreatePr:

; 196  : }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
_PsCreateProcess ENDP
_TEXT	ENDS
PUBLIC	_PsCreateThreadPriority
PUBLIC	_PsCreateThread
; Function compile flags: /Odtp /ZI
;	COMDAT _PsCreateThread
_TEXT	SEGMENT
_Priority$ = -4						; size = 4
_ThreadHandle$ = 8					; size = 4
_ProcessHandle$ = 12					; size = 4
_StartRoutine$ = 16					; size = 4
_StartContext$ = 20					; size = 4
_StackSize$ = 24					; size = 4
_AutoDelete$ = 28					; size = 4
_PsCreateThread PROC					; COMDAT

; 202  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 203  : 	SCHEDULE_PRIORITY Priority;
; 204  : 
; 205  : 	if(ProcessHandle == m_ProcMgrBlk.pt_head_process) Priority = PRIORITY_HIGH;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _ProcessHandle$[ebp]
  0000c	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR _m_ProcMgrBlk+12
  00012	75 09		 jne	 SHORT $LN2@PsCreateTh
  00014	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _Priority$[ebp], 0
  0001b	eb 07		 jmp	 SHORT $LN1@PsCreateTh
$LN2@PsCreateTh:

; 206  : 	else Priority = PRIORITY_NORMAL;

  0001d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _Priority$[ebp], 1
$LN1@PsCreateTh:

; 207  : 
; 208  : 	return PsCreateThreadPriority(ThreadHandle, ProcessHandle, StartRoutine, StartContext, StackSize, AutoDelete, Priority);

  00024	8b 45 fc	 mov	 eax, DWORD PTR _Priority$[ebp]
  00027	50		 push	 eax
  00028	8b 4d 1c	 mov	 ecx, DWORD PTR _AutoDelete$[ebp]
  0002b	51		 push	 ecx
  0002c	8b 55 18	 mov	 edx, DWORD PTR _StackSize$[ebp]
  0002f	52		 push	 edx
  00030	8b 45 14	 mov	 eax, DWORD PTR _StartContext$[ebp]
  00033	50		 push	 eax
  00034	8b 4d 10	 mov	 ecx, DWORD PTR _StartRoutine$[ebp]
  00037	51		 push	 ecx
  00038	8b 55 0c	 mov	 edx, DWORD PTR _ProcessHandle$[ebp]
  0003b	52		 push	 edx
  0003c	8b 45 08	 mov	 eax, DWORD PTR _ThreadHandle$[ebp]
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 _PsCreateThreadPriority
  00045	83 c4 1c	 add	 esp, 28			; 0000001cH

; 209  : }

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_PsCreateThread ENDP
_TEXT	ENDS
EXTRN	_HalSetupTSS:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT _PsCreateThreadPriority
_TEXT	SEGMENT
_pStack$ = -8						; size = 4
_pThread$ = -4						; size = 4
_ThreadHandle$ = 8					; size = 4
_ProcessHandle$ = 12					; size = 4
_StartRoutine$ = 16					; size = 4
_StartContext$ = 20					; size = 4
_StackSize$ = 24					; size = 4
_AutoDelete$ = 28					; size = 4
_Priority$ = 32						; size = 4
_PsCreateThreadPriority PROC				; COMDAT

; 212  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 213  : 	PTHREAD_CONTROL_BLOCK pThread;
; 214  : 	int *pStack;
; 215  : 	
; 216  : 	//메모리할당
; 217  : 	pThread = MmAllocateNonCachedMemory(sizeof(THREAD_CONTROL_BLOCK));

  00009	68 94 00 00 00	 push	 148			; 00000094H
  0000e	e8 00 00 00 00	 call	 _MmAllocateNonCachedMemory
  00013	83 c4 04	 add	 esp, 4
  00016	89 45 fc	 mov	 DWORD PTR _pThread$[ebp], eax

; 218  : 	if(pThread == NULL) return FALSE;

  00019	83 7d fc 00	 cmp	 DWORD PTR _pThread$[ebp], 0
  0001d	75 07		 jne	 SHORT $LN7@PsCreateTh@2
  0001f	33 c0		 xor	 eax, eax
  00021	e9 1e 01 00 00	 jmp	 $LN8@PsCreateTh@2
$LN7@PsCreateTh@2:

; 219  : 	//쓰레드에서 사용할 스택 할당
; 220  : 	pStack  = MmAllocateNonCachedMemory(StackSize);

  00026	8b 45 18	 mov	 eax, DWORD PTR _StackSize$[ebp]
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 _MmAllocateNonCachedMemory
  0002f	83 c4 04	 add	 esp, 4
  00032	89 45 f8	 mov	 DWORD PTR _pStack$[ebp], eax

; 221  : 	if(pStack == NULL) return FALSE;

  00035	83 7d f8 00	 cmp	 DWORD PTR _pStack$[ebp], 0
  00039	75 07		 jne	 SHORT $LN6@PsCreateTh@2
  0003b	33 c0		 xor	 eax, eax
  0003d	e9 02 01 00 00	 jmp	 $LN8@PsCreateTh@2
$LN6@PsCreateTh@2:

; 222  : 
; 223  : 	//부모 프로세스의 핸들 설정
; 224  : 	pThread->parent_process_handle		= ProcessHandle;

  00042	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  00045	8b 4d 0c	 mov	 ecx, DWORD PTR _ProcessHandle$[ebp]
  00048	89 08		 mov	 DWORD PTR [eax], ecx

; 225  : 	//Thread id 및 handle 할당
; 226  : 	pThread->thread_id					= PspGetNextThreadID(ProcessHandle);

  0004a	8b 45 0c	 mov	 eax, DWORD PTR _ProcessHandle$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 _PspGetNextThreadID
  00053	83 c4 04	 add	 esp, 4
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _pThread$[ebp]
  00059	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 227  : 	pThread->thread_handle				= (HANDLE)pThread;

  0005c	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _pThread$[ebp]
  00062	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 228  : 	pThread->thread_status				= THREAD_STATUS_STOP; //Thread 상태를 STOP으로 설정

  00065	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  00068	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 229  : 	pThread->auto_delete				= AutoDelete; 

  0006f	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  00072	8b 4d 1c	 mov	 ecx, DWORD PTR _AutoDelete$[ebp]
  00075	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 230  : 	pThread->pt_next_thread				= NULL;

  00078	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  0007b	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 231  : 	//쓰레드가 실행해야 하는 함수(StartRoutine), 함수에 넘어가는 인자(StartContext), 스택 사이즈 설정
; 232  : 	pThread->start_routine				= StartRoutine;

  00082	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  00085	8b 4d 10	 mov	 ecx, DWORD PTR _StartRoutine$[ebp]
  00088	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 233  : 	pThread->start_context				= StartContext;

  0008b	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  0008e	8b 4d 14	 mov	 ecx, DWORD PTR _StartContext$[ebp]
  00091	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 234  : 	pThread->pt_stack_base_address		= pStack;

  00094	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  00097	8b 4d f8	 mov	 ecx, DWORD PTR _pStack$[ebp]
  0009a	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 235  : 	pThread->stack_size					= StackSize;

  0009d	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  000a0	8b 4d 18	 mov	 ecx, DWORD PTR _StackSize$[ebp]
  000a3	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 236  : 
; 237  : 	pThread->priority					= Priority;

  000a6	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  000a9	8b 4d 20	 mov	 ecx, DWORD PTR _Priority$[ebp]
  000ac	89 88 90 00 00
	00		 mov	 DWORD PTR [eax+144], ecx

; 238  : 
; 239  : 
; 240  : 	//PspAddNewThread 함수를 통해 Process에 생성된 쓰레드를 추가
; 241  : 	if(!PspAddNewThread(ProcessHandle, (HANDLE)pThread)) return FALSE;

  000b2	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  000b5	50		 push	 eax
  000b6	8b 4d 0c	 mov	 ecx, DWORD PTR _ProcessHandle$[ebp]
  000b9	51		 push	 ecx
  000ba	e8 00 00 00 00	 call	 _PspAddNewThread
  000bf	83 c4 08	 add	 esp, 8
  000c2	85 c0		 test	 eax, eax
  000c4	75 04		 jne	 SHORT $LN5@PsCreateTh@2
  000c6	33 c0		 xor	 eax, eax
  000c8	eb 7a		 jmp	 SHORT $LN8@PsCreateTh@2
$LN5@PsCreateTh@2:

; 242  : 
; 243  : 	if(pThread->priority == PRIORITY_HIGH){

  000ca	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  000cd	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  000d4	75 13		 jne	 SHORT $LN4@PsCreateTh@2

; 244  : 		PspPushScheduleData(&highQ, (HANDLE)pThread);

  000d6	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  000d9	50		 push	 eax
  000da	68 00 00 00 00	 push	 OFFSET _highQ
  000df	e8 00 00 00 00	 call	 _PspPushScheduleData
  000e4	83 c4 08	 add	 esp, 8
  000e7	eb 30		 jmp	 SHORT $LN3@PsCreateTh@2
$LN4@PsCreateTh@2:

; 245  : 	}else if(pThread->priority == PRIORITY_NORMAL)

  000e9	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  000ec	83 b8 90 00 00
	00 01		 cmp	 DWORD PTR [eax+144], 1
  000f3	75 13		 jne	 SHORT $LN2@PsCreateTh@2

; 246  : 		PspPushScheduleData(&normalQ, (HANDLE)pThread);

  000f5	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  000f8	50		 push	 eax
  000f9	68 00 00 00 00	 push	 OFFSET _normalQ
  000fe	e8 00 00 00 00	 call	 _PspPushScheduleData
  00103	83 c4 08	 add	 esp, 8
  00106	eb 11		 jmp	 SHORT $LN3@PsCreateTh@2
$LN2@PsCreateTh@2:

; 247  : 	else PspPushScheduleData(&lowQ, (HANDLE)pThread);

  00108	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  0010b	50		 push	 eax
  0010c	68 00 00 00 00	 push	 OFFSET _lowQ
  00111	e8 00 00 00 00	 call	 _PspPushScheduleData
  00116	83 c4 08	 add	 esp, 8
$LN3@PsCreateTh@2:

; 248  : 
; 249  : 	HalSetupTSS(&pThread->thread_tss32, TRUE, (int)PspTaskEntryPoint, pStack, StackSize);

  00119	8b 45 18	 mov	 eax, DWORD PTR _StackSize$[ebp]
  0011c	50		 push	 eax
  0011d	8b 4d f8	 mov	 ecx, DWORD PTR _pStack$[ebp]
  00120	51		 push	 ecx
  00121	68 00 00 00 00	 push	 OFFSET _PspTaskEntryPoint
  00126	6a 01		 push	 1
  00128	8b 55 fc	 mov	 edx, DWORD PTR _pThread$[ebp]
  0012b	83 c2 28	 add	 edx, 40			; 00000028H
  0012e	52		 push	 edx
  0012f	e8 00 00 00 00	 call	 _HalSetupTSS
  00134	83 c4 14	 add	 esp, 20			; 00000014H

; 250  : 
; 251  : 	*ThreadHandle = pThread;

  00137	8b 45 08	 mov	 eax, DWORD PTR _ThreadHandle$[ebp]
  0013a	8b 4d fc	 mov	 ecx, DWORD PTR _pThread$[ebp]
  0013d	89 08		 mov	 DWORD PTR [eax], ecx

; 252  : 
; 253  : 	return TRUE;

  0013f	b8 01 00 00 00	 mov	 eax, 1
$LN8@PsCreateTh@2:

; 254  : }

  00144	5f		 pop	 edi
  00145	5e		 pop	 esi
  00146	5b		 pop	 ebx
  00147	8b e5		 mov	 esp, ebp
  00149	5d		 pop	 ebp
  0014a	c3		 ret	 0
_PsCreateThreadPriority ENDP
_TEXT	ENDS
PUBLIC	_PsGetCurrentThread
EXTRN	_HalTaskSwitch:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT _PspTaskEntryPoint
_TEXT	SEGMENT
_ret_value$ = -12					; size = 4
_current_thread$ = -8					; size = 4
_start_routine$ = -4					; size = 4
_PspTaskEntryPoint PROC					; COMDAT

; 159  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 160  : 	PKSTART_ROUTINE start_routine;
; 161  : 	HANDLE current_thread;
; 162  : 	DWORD ret_value;
; 163  : 	//현재 실행되는 thread의 출cb가지고옴
; 164  : 	current_thread = PsGetCurrentThread();

  00009	e8 00 00 00 00	 call	 _PsGetCurrentThread
  0000e	89 45 f8	 mov	 DWORD PTR _current_thread$[ebp], eax

; 165  : 	//tcb의 start_routine 콜백함수에 start_context 포인터를 넘겨서 콜백 함수를 호출
; 166  : 	start_routine = PsGetThreadPtr(current_thread)->start_routine;

  00011	8b 45 f8	 mov	 eax, DWORD PTR _current_thread$[ebp]
  00014	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00017	89 4d fc	 mov	 DWORD PTR _start_routine$[ebp], ecx

; 167  : 	ret_value = start_routine(PsGetThreadPtr(current_thread)->start_context);

  0001a	8b 45 f8	 mov	 eax, DWORD PTR _current_thread$[ebp]
  0001d	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00020	51		 push	 ecx
  00021	ff 55 fc	 call	 DWORD PTR _start_routine$[ebp]
  00024	83 c4 04	 add	 esp, 4
  00027	89 45 f4	 mov	 DWORD PTR _ret_value$[ebp], eax

; 168  : 	
; 169  : 	//쓰레드의 상태를 THREAD_STATUS_TERMINATED로 설정
; 170  : 	PsGetThreadPtr(current_thread)->thread_status = THREAD_STATUS_TERMINATED;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _current_thread$[ebp]
  0002d	c7 40 0c 01 00
	00 00		 mov	 DWORD PTR [eax+12], 1

; 171  : 	//태스크 스위칭 함수를 호출
; 172  : 	HalTaskSwitch();

  00034	e8 00 00 00 00	 call	 _HalTaskSwitch
$LN2@PspTaskEnt:

; 173  : 
; 174  : 	while(1);

  00039	b8 01 00 00 00	 mov	 eax, 1
  0003e	85 c0		 test	 eax, eax
  00040	74 02		 je	 SHORT $LN3@PspTaskEnt
  00042	eb f5		 jmp	 SHORT $LN2@PspTaskEnt
$LN3@PspTaskEnt:

; 175  : }

  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
_PspTaskEntryPoint ENDP
_TEXT	ENDS
PUBLIC	_PsCreateIntThread
; Function compile flags: /Odtp /ZI
;	COMDAT _PsCreateIntThread
_TEXT	SEGMENT
_pStack$ = -8						; size = 4
_pThread$ = -4						; size = 4
_ThreadHandle$ = 8					; size = 4
_ProcessHandle$ = 12					; size = 4
_StartRoutine$ = 16					; size = 4
_StartContext$ = 20					; size = 4
_StackSize$ = 24					; size = 4
_PsCreateIntThread PROC					; COMDAT

; 258  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 259  : 	PTHREAD_CONTROL_BLOCK pThread;
; 260  : 	int *pStack;
; 261  : 
; 262  : 	pThread = MmAllocateNonCachedMemory(sizeof(THREAD_CONTROL_BLOCK));

  00009	68 94 00 00 00	 push	 148			; 00000094H
  0000e	e8 00 00 00 00	 call	 _MmAllocateNonCachedMemory
  00013	83 c4 04	 add	 esp, 4
  00016	89 45 fc	 mov	 DWORD PTR _pThread$[ebp], eax

; 263  : 	if(pThread == NULL) return FALSE;

  00019	83 7d fc 00	 cmp	 DWORD PTR _pThread$[ebp], 0
  0001d	75 07		 jne	 SHORT $LN3@PsCreateIn
  0001f	33 c0		 xor	 eax, eax
  00021	e9 c3 00 00 00	 jmp	 $LN4@PsCreateIn
$LN3@PsCreateIn:

; 264  : 	pStack  = MmAllocateNonCachedMemory(StackSize);

  00026	8b 45 18	 mov	 eax, DWORD PTR _StackSize$[ebp]
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 _MmAllocateNonCachedMemory
  0002f	83 c4 04	 add	 esp, 4
  00032	89 45 f8	 mov	 DWORD PTR _pStack$[ebp], eax

; 265  : 	if(pStack == NULL) return FALSE;

  00035	83 7d f8 00	 cmp	 DWORD PTR _pStack$[ebp], 0
  00039	75 07		 jne	 SHORT $LN2@PsCreateIn
  0003b	33 c0		 xor	 eax, eax
  0003d	e9 a7 00 00 00	 jmp	 $LN4@PsCreateIn
$LN2@PsCreateIn:

; 266  : 
; 267  : 	pThread->parent_process_handle		= ProcessHandle;

  00042	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  00045	8b 4d 0c	 mov	 ecx, DWORD PTR _ProcessHandle$[ebp]
  00048	89 08		 mov	 DWORD PTR [eax], ecx

; 268  : 	pThread->thread_id					= PspGetNextThreadID(ProcessHandle);

  0004a	8b 45 0c	 mov	 eax, DWORD PTR _ProcessHandle$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 _PspGetNextThreadID
  00053	83 c4 04	 add	 esp, 4
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _pThread$[ebp]
  00059	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 269  : 	pThread->thread_handle				= (HANDLE)pThread;

  0005c	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _pThread$[ebp]
  00062	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 270  : 	pThread->thread_status				= THREAD_STATUS_STOP;

  00065	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  00068	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 271  : 	//PsCreateThread함수와 다르게 auto_delete가 false
; 272  : 	pThread->auto_delete				= FALSE;

  0006f	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  00072	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 273  : 	pThread->pt_next_thread				= NULL;

  00079	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  0007c	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 274  : 	//PsCreateThread함수와 다르게 argument의 StartRoutine을 바로 할당
; 275  : 	pThread->start_routine				= StartRoutine;

  00083	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  00086	8b 4d 10	 mov	 ecx, DWORD PTR _StartRoutine$[ebp]
  00089	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 276  : 	pThread->start_context				= StartContext;

  0008c	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  0008f	8b 4d 14	 mov	 ecx, DWORD PTR _StartContext$[ebp]
  00092	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 277  : 	pThread->pt_stack_base_address		= pStack;

  00095	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  00098	8b 4d f8	 mov	 ecx, DWORD PTR _pStack$[ebp]
  0009b	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 278  : 	pThread->stack_size					= StackSize;

  0009e	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  000a1	8b 4d 18	 mov	 ecx, DWORD PTR _StackSize$[ebp]
  000a4	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 279  : 	if(!PspAddNewThread(ProcessHandle, (HANDLE)pThread)) return FALSE;

  000a7	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  000aa	50		 push	 eax
  000ab	8b 4d 0c	 mov	 ecx, DWORD PTR _ProcessHandle$[ebp]
  000ae	51		 push	 ecx
  000af	e8 00 00 00 00	 call	 _PspAddNewThread
  000b4	83 c4 08	 add	 esp, 8
  000b7	85 c0		 test	 eax, eax
  000b9	75 04		 jne	 SHORT $LN1@PsCreateIn
  000bb	33 c0		 xor	 eax, eax
  000bd	eb 2a		 jmp	 SHORT $LN4@PsCreateIn
$LN1@PsCreateIn:

; 280  : 
; 281  : 	HalSetupTSS(&pThread->thread_tss32, TRUE, (int)StartRoutine, pStack, StackSize);

  000bf	8b 45 18	 mov	 eax, DWORD PTR _StackSize$[ebp]
  000c2	50		 push	 eax
  000c3	8b 4d f8	 mov	 ecx, DWORD PTR _pStack$[ebp]
  000c6	51		 push	 ecx
  000c7	8b 55 10	 mov	 edx, DWORD PTR _StartRoutine$[ebp]
  000ca	52		 push	 edx
  000cb	6a 01		 push	 1
  000cd	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  000d0	83 c0 28	 add	 eax, 40			; 00000028H
  000d3	50		 push	 eax
  000d4	e8 00 00 00 00	 call	 _HalSetupTSS
  000d9	83 c4 14	 add	 esp, 20			; 00000014H

; 282  : 
; 283  : 	*ThreadHandle = pThread;

  000dc	8b 45 08	 mov	 eax, DWORD PTR _ThreadHandle$[ebp]
  000df	8b 4d fc	 mov	 ecx, DWORD PTR _pThread$[ebp]
  000e2	89 08		 mov	 DWORD PTR [eax], ecx

; 284  : 
; 285  : 	return TRUE;

  000e4	b8 01 00 00 00	 mov	 eax, 1
$LN4@PsCreateIn:

; 286  : }

  000e9	5f		 pop	 edi
  000ea	5e		 pop	 esi
  000eb	5b		 pop	 ebx
  000ec	8b e5		 mov	 esp, ebp
  000ee	5d		 pop	 ebp
  000ef	c3		 ret	 0
_PsCreateIntThread ENDP
_TEXT	ENDS
PUBLIC	_PsSetThreadStatus
; Function compile flags: /Odtp /ZI
;	COMDAT _PsSetThreadStatus
_TEXT	SEGMENT
_ThreadHandle$ = 8					; size = 4
_Status$ = 12						; size = 4
_PsSetThreadStatus PROC					; COMDAT

; 289  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 290  : 	PsGetThreadPtr(ThreadHandle)->thread_status = Status;

  00009	8b 45 08	 mov	 eax, DWORD PTR _ThreadHandle$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _Status$[ebp]
  0000f	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 291  : 
; 292  : 	return TRUE;

  00012	b8 01 00 00 00	 mov	 eax, 1

; 293  : }

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
_PsSetThreadStatus ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _PsGetCurrentThread
_TEXT	SEGMENT
_thread$ = -4						; size = 4
_PsGetCurrentThread PROC				; COMDAT

; 297  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 298  : 	HANDLE thread;
; 299  : 
; 300  : ENTER_CRITICAL_SECTION();

  00009	9c		 pushfd
  0000a	fa		 cli

; 301  : 	//m_ProcMgrBlk의 pt_current_thread를 반환
; 302  : 	thread = (HANDLE)(m_ProcMgrBlk.pt_current_thread);

  0000b	a1 08 00 00 00	 mov	 eax, DWORD PTR _m_ProcMgrBlk+8
  00010	89 45 fc	 mov	 DWORD PTR _thread$[ebp], eax

; 303  : EXIT_CRITICAL_SECTION();

  00013	9d		 popfd

; 304  : 	return thread;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _thread$[ebp]

; 305  : }

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
_PsGetCurrentThread ENDP
_TEXT	ENDS
PUBLIC	_PsDeleteThread
; Function compile flags: /Odtp /ZI
;	COMDAT _PsDeleteThread
_TEXT	SEGMENT
_ThreadHandle$ = 8					; size = 4
_PsDeleteThread PROC					; COMDAT

; 309  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 310  : 	return PspPushCuttingItem(&m_ThreadCuttingList, ThreadHandle);

  00009	8b 45 08	 mov	 eax, DWORD PTR _ThreadHandle$[ebp]
  0000c	50		 push	 eax
  0000d	68 00 00 00 00	 push	 OFFSET _m_ThreadCuttingList
  00012	e8 00 00 00 00	 call	 _PspPushCuttingItem
  00017	83 c4 08	 add	 esp, 8

; 311  : }

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
_PsDeleteThread ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _PspPushCuttingItem
_TEXT	SEGMENT
_bResult$ = -4						; size = 4
_pCuttingList$ = 8					; size = 4
_Item$ = 12						; size = 4
_PspPushCuttingItem PROC				; COMDAT

; 338  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 339  : 	BOOL bResult = TRUE;

  00009	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _bResult$[ebp], 1

; 340  : 
; 341  : ENTER_CRITICAL_SECTION();

  00010	9c		 pushfd
  00011	fa		 cli

; 342  : 	{
; 343  : 		// 커터큐에 남은 공간 체크
; 344  : 		if(pCuttingList->count == MAX_CUTTING_ITEM){

  00012	8b 45 08	 mov	 eax, DWORD PTR _pCuttingList$[ebp]
  00015	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00018	83 f9 1e	 cmp	 ecx, 30			; 0000001eH
  0001b	75 09		 jne	 SHORT $LN2@PspPushCut

; 345  : 			bResult = FALSE;

  0001d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _bResult$[ebp], 0

; 346  : 			goto $exit;

  00024	eb 40		 jmp	 SHORT $$exit$1076
$LN2@PspPushCut:

; 347  : 		}
; 348  : 
; 349  : 		//POP
; 350  : 		pCuttingList->count++;

  00026	8b 45 08	 mov	 eax, DWORD PTR _pCuttingList$[ebp]
  00029	8a 08		 mov	 cl, BYTE PTR [eax]
  0002b	80 c1 01	 add	 cl, 1
  0002e	8b 55 08	 mov	 edx, DWORD PTR _pCuttingList$[ebp]
  00031	88 0a		 mov	 BYTE PTR [edx], cl

; 351  : 		pCuttingList->handle_list[pCuttingList->tail++] = Item;

  00033	8b 45 08	 mov	 eax, DWORD PTR _pCuttingList$[ebp]
  00036	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  0003a	8b 55 08	 mov	 edx, DWORD PTR _pCuttingList$[ebp]
  0003d	8b 45 0c	 mov	 eax, DWORD PTR _Item$[ebp]
  00040	89 44 8a 03	 mov	 DWORD PTR [edx+ecx*4+3], eax
  00044	8b 4d 08	 mov	 ecx, DWORD PTR _pCuttingList$[ebp]
  00047	8a 51 02	 mov	 dl, BYTE PTR [ecx+2]
  0004a	80 c2 01	 add	 dl, 1
  0004d	8b 45 08	 mov	 eax, DWORD PTR _pCuttingList$[ebp]
  00050	88 50 02	 mov	 BYTE PTR [eax+2], dl

; 352  : 		if(pCuttingList->tail >= MAX_CUTTING_ITEM)

  00053	8b 45 08	 mov	 eax, DWORD PTR _pCuttingList$[ebp]
  00056	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  0005a	83 f9 1e	 cmp	 ecx, 30			; 0000001eH
  0005d	7c 07		 jl	 SHORT $$exit$1076

; 353  : 			pCuttingList->tail = 0;

  0005f	8b 45 08	 mov	 eax, DWORD PTR _pCuttingList$[ebp]
  00062	c6 40 02 00	 mov	 BYTE PTR [eax+2], 0
$$exit$1076:

; 354  : 	}
; 355  : $exit:
; 356  : EXIT_CRITICAL_SECTION();

  00066	9d		 popfd

; 357  : 	return bResult;

  00067	8b 45 fc	 mov	 eax, DWORD PTR _bResult$[ebp]

; 358  : }

  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_PspPushCuttingItem ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _PspGetNextProcessID
_TEXT	SEGMENT
_process_id$ = -4					; size = 4
_PspGetNextProcessID PROC				; COMDAT

; 363  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 364  : 	DWORD process_id;
; 365  : 
; 366  : ENTER_CRITICAL_SECTION();

  00009	9c		 pushfd
  0000a	fa		 cli

; 367  : 	process_id = m_ProcMgrBlk.next_process_id++;

  0000b	a1 04 00 00 00	 mov	 eax, DWORD PTR _m_ProcMgrBlk+4
  00010	89 45 fc	 mov	 DWORD PTR _process_id$[ebp], eax
  00013	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR _m_ProcMgrBlk+4
  00019	83 c1 01	 add	 ecx, 1
  0001c	89 0d 04 00 00
	00		 mov	 DWORD PTR _m_ProcMgrBlk+4, ecx

; 368  : EXIT_CRITICAL_SECTION();

  00022	9d		 popfd

; 369  : 
; 370  : 	return process_id;

  00023	8b 45 fc	 mov	 eax, DWORD PTR _process_id$[ebp]

; 371  : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
_PspGetNextProcessID ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _PspGetNextThreadID
_TEXT	SEGMENT
_thread_id$ = -4					; size = 4
_ProcessHandle$ = 8					; size = 4
_PspGetNextThreadID PROC				; COMDAT

; 375  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 376  : 	DWORD thread_id;
; 377  : 
; 378  : ENTER_CRITICAL_SECTION();

  00009	9c		 pushfd
  0000a	fa		 cli

; 379  : 	thread_id = PsGetProcessPtr(ProcessHandle)->next_thread_id++;

  0000b	8b 45 08	 mov	 eax, DWORD PTR _ProcessHandle$[ebp]
  0000e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00011	89 4d fc	 mov	 DWORD PTR _thread_id$[ebp], ecx
  00014	8b 55 08	 mov	 edx, DWORD PTR _ProcessHandle$[ebp]
  00017	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0001a	83 c0 01	 add	 eax, 1
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _ProcessHandle$[ebp]
  00020	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 380  : EXIT_CRITICAL_SECTION();

  00023	9d		 popfd

; 381  : 
; 382  : 	return thread_id;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _thread_id$[ebp]

; 383  : }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
_PspGetNextThreadID ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _PspAddNewProcess
_TEXT	SEGMENT
_pt_next_process$ = -4					; size = 4
_ProcessHandle$ = 8					; size = 4
_PspAddNewProcess PROC					; COMDAT

; 387  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 388  : 	PPROCESS_CONTROL_BLOCK *pt_next_process;
; 389  : 
; 390  : ENTER_CRITICAL_SECTION();

  00009	9c		 pushfd
  0000a	fa		 cli

; 391  : 	pt_next_process = &m_ProcMgrBlk.pt_head_process;

  0000b	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR _pt_next_process$[ebp], OFFSET _m_ProcMgrBlk+12
$LN2@PspAddNewP:

; 392  : 	while(*pt_next_process)

  00012	8b 45 fc	 mov	 eax, DWORD PTR _pt_next_process$[ebp]
  00015	83 38 00	 cmp	 DWORD PTR [eax], 0
  00018	74 0d		 je	 SHORT $LN1@PspAddNewP

; 393  : 		pt_next_process = &(*pt_next_process)->pt_next_process;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _pt_next_process$[ebp]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	83 c1 08	 add	 ecx, 8
  00022	89 4d fc	 mov	 DWORD PTR _pt_next_process$[ebp], ecx
  00025	eb eb		 jmp	 SHORT $LN2@PspAddNewP
$LN1@PspAddNewP:

; 394  : 	*pt_next_process = PsGetProcessPtr(ProcessHandle);

  00027	8b 45 fc	 mov	 eax, DWORD PTR _pt_next_process$[ebp]
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _ProcessHandle$[ebp]
  0002d	89 08		 mov	 DWORD PTR [eax], ecx

; 395  : 	m_ProcMgrBlk.process_count++;

  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_ProcMgrBlk
  00034	83 c0 01	 add	 eax, 1
  00037	a3 00 00 00 00	 mov	 DWORD PTR _m_ProcMgrBlk, eax

; 396  : EXIT_CRITICAL_SECTION();

  0003c	9d		 popfd

; 397  : 
; 398  : 	return TRUE;

  0003d	b8 01 00 00 00	 mov	 eax, 1

; 399  : }

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
_PspAddNewProcess ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _PspAddNewThread
_TEXT	SEGMENT
_pt_next_thread$ = -4					; size = 4
_ProcessHandle$ = 8					; size = 4
_ThreadHandle$ = 12					; size = 4
_PspAddNewThread PROC					; COMDAT

; 403  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 404  : 	PTHREAD_CONTROL_BLOCK *pt_next_thread;
; 405  : 
; 406  : ENTER_CRITICAL_SECTION();

  00009	9c		 pushfd
  0000a	fa		 cli

; 407  : 	pt_next_thread = &PsGetProcessPtr(ProcessHandle)->pt_head_thread;

  0000b	8b 45 08	 mov	 eax, DWORD PTR _ProcessHandle$[ebp]
  0000e	83 c0 14	 add	 eax, 20			; 00000014H
  00011	89 45 fc	 mov	 DWORD PTR _pt_next_thread$[ebp], eax
$LN2@PspAddNewT:

; 408  : 	while(*pt_next_thread)

  00014	8b 45 fc	 mov	 eax, DWORD PTR _pt_next_thread$[ebp]
  00017	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001a	74 0d		 je	 SHORT $LN1@PspAddNewT

; 409  : 		pt_next_thread = &(*pt_next_thread)->pt_next_thread;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _pt_next_thread$[ebp]
  0001f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00021	83 c1 14	 add	 ecx, 20			; 00000014H
  00024	89 4d fc	 mov	 DWORD PTR _pt_next_thread$[ebp], ecx
  00027	eb eb		 jmp	 SHORT $LN2@PspAddNewT
$LN1@PspAddNewT:

; 410  : 	*pt_next_thread = PsGetThreadPtr(ThreadHandle);

  00029	8b 45 fc	 mov	 eax, DWORD PTR _pt_next_thread$[ebp]
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _ThreadHandle$[ebp]
  0002f	89 08		 mov	 DWORD PTR [eax], ecx

; 411  : 	PsGetProcessPtr(ProcessHandle)->thread_count++;

  00031	8b 45 08	 mov	 eax, DWORD PTR _ProcessHandle$[ebp]
  00034	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00037	83 c1 01	 add	 ecx, 1
  0003a	8b 55 08	 mov	 edx, DWORD PTR _ProcessHandle$[ebp]
  0003d	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 412  : EXIT_CRITICAL_SECTION();

  00040	9d		 popfd

; 413  : 
; 414  : 	return TRUE;

  00041	b8 01 00 00 00	 mov	 eax, 1

; 415  : }

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
_PspAddNewThread ENDP
_TEXT	ENDS
EXTRN	_HalWriteTssIntoGdt:PROC
EXTRN	_HalSetupTaskLink:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT _PspCreateSystemProcess
_TEXT	SEGMENT
_sw_task_sw_handle$ = -28				; size = 4
_tmr_thread_handle$ = -24				; size = 4
_thread_cutter_handle$ = -20				; size = 4
_process_cutter_handle$ = -16				; size = 4
_idle_thread_handle$ = -12				; size = 4
_init_thread_handle$ = -8				; size = 4
_process_handle$ = -4					; size = 4
_PspCreateSystemProcess PROC				; COMDAT

; 696  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 697  : 	HANDLE process_handle;
; 698  : 	HANDLE init_thread_handle, idle_thread_handle, process_cutter_handle, thread_cutter_handle;
; 699  : 	HANDLE tmr_thread_handle, sw_task_sw_handle;
; 700  : 
; 701  : 	//메인 프로세스를 생성해주는 PSCreateProcess 함수 호출
; 702  : 	if(!PsCreateProcess(&process_handle)) 

  00009	8d 45 fc	 lea	 eax, DWORD PTR _process_handle$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _PsCreateProcess
  00012	83 c4 04	 add	 esp, 4
  00015	85 c0		 test	 eax, eax
  00017	75 07		 jne	 SHORT $LN7@PspCreateS

; 703  : 		return FALSE;

  00019	33 c0		 xor	 eax, eax
  0001b	e9 90 01 00 00	 jmp	 $LN8@PspCreateS
$LN7@PspCreateS:

; 704  : 
; 705  : 	//프로세스를 생성하기 위해 베이스가 될 메인 쓰레드(init 쓰레드) 생성 
; 706  : 	if(!PsCreateThread(&init_thread_handle, process_handle, NULL, NULL, DEFAULT_STACK_SIZE, FALSE)) 

  00020	6a 00		 push	 0
  00022	68 00 00 01 00	 push	 65536			; 00010000H
  00027	6a 00		 push	 0
  00029	6a 00		 push	 0
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _process_handle$[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d f8	 lea	 ecx, DWORD PTR _init_thread_handle$[ebp]
  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 _PsCreateThread
  00038	83 c4 18	 add	 esp, 24			; 00000018H
  0003b	85 c0		 test	 eax, eax
  0003d	75 07		 jne	 SHORT $LN6@PspCreateS

; 707  : 		return FALSE;

  0003f	33 c0		 xor	 eax, eax
  00041	e9 6a 01 00 00	 jmp	 $LN8@PspCreateS
$LN6@PspCreateS:

; 708  : 
; 709  : 	//초기 쓰레드의 백링크(Prev-Link) 설정
; 710  : 	HalSetupTaskLink(&PsGetThreadPtr(init_thread_handle)->thread_tss32, TASK_SW_SEG);

  00046	6a 28		 push	 40			; 00000028H
  00048	8b 45 f8	 mov	 eax, DWORD PTR _init_thread_handle$[ebp]
  0004b	83 c0 28	 add	 eax, 40			; 00000028H
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 _HalSetupTaskLink
  00054	83 c4 08	 add	 esp, 8

; 711  : 	//초기 쓰레드의 TSS를 GDT내에 설정
; 712  : 	HalWriteTssIntoGdt(&PsGetThreadPtr(init_thread_handle)->thread_tss32, sizeof(TSS_32), INIT_TSS_SEG, FALSE);

  00057	6a 00		 push	 0
  00059	6a 30		 push	 48			; 00000030H
  0005b	6a 68		 push	 104			; 00000068H
  0005d	8b 45 f8	 mov	 eax, DWORD PTR _init_thread_handle$[ebp]
  00060	83 c0 28	 add	 eax, 40			; 00000028H
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 _HalWriteTssIntoGdt
  00069	83 c4 10	 add	 esp, 16			; 00000010H

; 713  : 	_asm {
; 714  : 		push	ax

  0006c	66 50		 push	 ax

; 715  : 		mov		ax, INIT_TSS_SEG

  0006e	66 b8 30 00	 mov	 ax, 48			; 00000030H

; 716  : 		ltr		ax

  00072	0f 00 d8	 ltr	 ax

; 717  : 		pop		ax

  00075	66 58		 pop	 ax

; 718  : 	}
; 719  : 
; 720  : 
; 721  : 	//Interuupt thread 수행 시 타이머 처리를 위한 쓰레드 생성 
; 722  : 	if(!PsCreateIntThread(&tmr_thread_handle, process_handle, Psp_IRQ_SystemTimer, NULL, DEFAULT_STACK_SIZE))

  00077	68 00 00 01 00	 push	 65536			; 00010000H
  0007c	6a 00		 push	 0
  0007e	68 00 00 00 00	 push	 OFFSET _Psp_IRQ_SystemTimer
  00083	8b 45 fc	 mov	 eax, DWORD PTR _process_handle$[ebp]
  00086	50		 push	 eax
  00087	8d 4d e8	 lea	 ecx, DWORD PTR _tmr_thread_handle$[ebp]
  0008a	51		 push	 ecx
  0008b	e8 00 00 00 00	 call	 _PsCreateIntThread
  00090	83 c4 14	 add	 esp, 20			; 00000014H
  00093	85 c0		 test	 eax, eax
  00095	75 07		 jne	 SHORT $LN5@PspCreateS

; 723  : 		return FALSE;

  00097	33 c0		 xor	 eax, eax
  00099	e9 12 01 00 00	 jmp	 $LN8@PspCreateS
$LN5@PspCreateS:

; 724  : 	HalWriteTssIntoGdt(&PsGetThreadPtr(tmr_thread_handle)->thread_tss32, sizeof(TSS_32), TMR_TSS_SEG, FALSE);

  0009e	6a 00		 push	 0
  000a0	6a 38		 push	 56			; 00000038H
  000a2	6a 68		 push	 104			; 00000068H
  000a4	8b 45 e8	 mov	 eax, DWORD PTR _tmr_thread_handle$[ebp]
  000a7	83 c0 28	 add	 eax, 40			; 00000028H
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 _HalWriteTssIntoGdt
  000b0	83 c4 10	 add	 esp, 16			; 00000010H

; 725  : 	//소프트웨어 interrupt를 위한 interrupt thread 생성
; 726  : 	if(!PsCreateIntThread(&sw_task_sw_handle, process_handle, PspSoftTaskSW, NULL, DEFAULT_STACK_SIZE))

  000b3	68 00 00 01 00	 push	 65536			; 00010000H
  000b8	6a 00		 push	 0
  000ba	68 00 00 00 00	 push	 OFFSET _PspSoftTaskSW
  000bf	8b 45 fc	 mov	 eax, DWORD PTR _process_handle$[ebp]
  000c2	50		 push	 eax
  000c3	8d 4d e4	 lea	 ecx, DWORD PTR _sw_task_sw_handle$[ebp]
  000c6	51		 push	 ecx
  000c7	e8 00 00 00 00	 call	 _PsCreateIntThread
  000cc	83 c4 14	 add	 esp, 20			; 00000014H
  000cf	85 c0		 test	 eax, eax
  000d1	75 07		 jne	 SHORT $LN4@PspCreateS

; 727  : 		return FALSE;

  000d3	33 c0		 xor	 eax, eax
  000d5	e9 d6 00 00 00	 jmp	 $LN8@PspCreateS
$LN4@PspCreateS:

; 728  : 	HalWriteTssIntoGdt(&PsGetThreadPtr(sw_task_sw_handle)->thread_tss32, sizeof(TSS_32), SOFT_TS_TSS_SEG, FALSE);

  000da	6a 00		 push	 0
  000dc	6a 40		 push	 64			; 00000040H
  000de	6a 68		 push	 104			; 00000068H
  000e0	8b 45 e4	 mov	 eax, DWORD PTR _sw_task_sw_handle$[ebp]
  000e3	83 c0 28	 add	 eax, 40			; 00000028H
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _HalWriteTssIntoGdt
  000ec	83 c4 10	 add	 esp, 16			; 00000010H

; 729  : 	
; 730  : 	//idle thread 생성
; 731  : 	if(!PsCreateThread(&idle_thread_handle, process_handle, PspIdleThread, NULL, DEFAULT_STACK_SIZE, FALSE))

  000ef	6a 00		 push	 0
  000f1	68 00 00 01 00	 push	 65536			; 00010000H
  000f6	6a 00		 push	 0
  000f8	68 00 00 00 00	 push	 OFFSET _PspIdleThread
  000fd	8b 45 fc	 mov	 eax, DWORD PTR _process_handle$[ebp]
  00100	50		 push	 eax
  00101	8d 4d f4	 lea	 ecx, DWORD PTR _idle_thread_handle$[ebp]
  00104	51		 push	 ecx
  00105	e8 00 00 00 00	 call	 _PsCreateThread
  0010a	83 c4 18	 add	 esp, 24			; 00000018H
  0010d	85 c0		 test	 eax, eax
  0010f	75 07		 jne	 SHORT $LN3@PspCreateS

; 732  : 		return FALSE;

  00111	33 c0		 xor	 eax, eax
  00113	e9 98 00 00 00	 jmp	 $LN8@PspCreateS
$LN3@PspCreateS:

; 733  : 	PsSetThreadStatus(idle_thread_handle, THREAD_STATUS_RUNNING);

  00118	6a 04		 push	 4
  0011a	8b 45 f4	 mov	 eax, DWORD PTR _idle_thread_handle$[ebp]
  0011d	50		 push	 eax
  0011e	e8 00 00 00 00	 call	 _PsSetThreadStatus
  00123	83 c4 08	 add	 esp, 8

; 734  : 	HalWriteTssIntoGdt(&PsGetThreadPtr(idle_thread_handle)->thread_tss32, sizeof(TSS_32), TASK_SW_SEG, TRUE);

  00126	6a 01		 push	 1
  00128	6a 28		 push	 40			; 00000028H
  0012a	6a 68		 push	 104			; 00000068H
  0012c	8b 45 f4	 mov	 eax, DWORD PTR _idle_thread_handle$[ebp]
  0012f	83 c0 28	 add	 eax, 40			; 00000028H
  00132	50		 push	 eax
  00133	e8 00 00 00 00	 call	 _HalWriteTssIntoGdt
  00138	83 c4 10	 add	 esp, 16			; 00000010H

; 735  : 	m_ProcMgrBlk.pt_current_thread = idle_thread_handle;

  0013b	8b 45 f4	 mov	 eax, DWORD PTR _idle_thread_handle$[ebp]
  0013e	a3 08 00 00 00	 mov	 DWORD PTR _m_ProcMgrBlk+8, eax

; 736  : 	//종료된 프로세스와 스레드를 삭제하는 cutter쓰레드
; 737  : 	if(!PsCreateThread(&process_cutter_handle, process_handle, PspProcessCutterThread, NULL, DEFAULT_STACK_SIZE, FALSE))

  00143	6a 00		 push	 0
  00145	68 00 00 01 00	 push	 65536			; 00010000H
  0014a	6a 00		 push	 0
  0014c	68 00 00 00 00	 push	 OFFSET _PspProcessCutterThread
  00151	8b 45 fc	 mov	 eax, DWORD PTR _process_handle$[ebp]
  00154	50		 push	 eax
  00155	8d 4d f0	 lea	 ecx, DWORD PTR _process_cutter_handle$[ebp]
  00158	51		 push	 ecx
  00159	e8 00 00 00 00	 call	 _PsCreateThread
  0015e	83 c4 18	 add	 esp, 24			; 00000018H
  00161	85 c0		 test	 eax, eax
  00163	75 04		 jne	 SHORT $LN2@PspCreateS

; 738  : 		return FALSE;

  00165	33 c0		 xor	 eax, eax
  00167	eb 47		 jmp	 SHORT $LN8@PspCreateS
$LN2@PspCreateS:

; 739  : 	PsSetThreadStatus(process_cutter_handle, THREAD_STATUS_READY);

  00169	6a 02		 push	 2
  0016b	8b 45 f0	 mov	 eax, DWORD PTR _process_cutter_handle$[ebp]
  0016e	50		 push	 eax
  0016f	e8 00 00 00 00	 call	 _PsSetThreadStatus
  00174	83 c4 08	 add	 esp, 8

; 740  : 	if(!PsCreateThread(&thread_cutter_handle, process_handle, PspThreadCutterThread, NULL, DEFAULT_STACK_SIZE, FALSE))

  00177	6a 00		 push	 0
  00179	68 00 00 01 00	 push	 65536			; 00010000H
  0017e	6a 00		 push	 0
  00180	68 00 00 00 00	 push	 OFFSET _PspThreadCutterThread
  00185	8b 45 fc	 mov	 eax, DWORD PTR _process_handle$[ebp]
  00188	50		 push	 eax
  00189	8d 4d ec	 lea	 ecx, DWORD PTR _thread_cutter_handle$[ebp]
  0018c	51		 push	 ecx
  0018d	e8 00 00 00 00	 call	 _PsCreateThread
  00192	83 c4 18	 add	 esp, 24			; 00000018H
  00195	85 c0		 test	 eax, eax
  00197	75 04		 jne	 SHORT $LN1@PspCreateS

; 741  : 		return FALSE;

  00199	33 c0		 xor	 eax, eax
  0019b	eb 13		 jmp	 SHORT $LN8@PspCreateS
$LN1@PspCreateS:

; 742  : 	PsSetThreadStatus(thread_cutter_handle, THREAD_STATUS_READY);

  0019d	6a 02		 push	 2
  0019f	8b 45 ec	 mov	 eax, DWORD PTR _thread_cutter_handle$[ebp]
  001a2	50		 push	 eax
  001a3	e8 00 00 00 00	 call	 _PsSetThreadStatus
  001a8	83 c4 08	 add	 esp, 8

; 743  : 
; 744  : 	return TRUE;

  001ab	b8 01 00 00 00	 mov	 eax, 1
$LN8@PspCreateS:

; 745  : }

  001b0	5f		 pop	 edi
  001b1	5e		 pop	 esi
  001b2	5b		 pop	 ebx
  001b3	8b e5		 mov	 esp, ebp
  001b5	5d		 pop	 ebp
  001b6	c3		 ret	 0
_PspCreateSystemProcess ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _PspIdleThread
_TEXT	SEGMENT
_StartContext$ = 8					; size = 4
_PspIdleThread PROC					; COMDAT

; 513  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@PspIdleThr:

; 514  : 	while(1){

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	85 c0		 test	 eax, eax
  00010	74 07		 je	 SHORT $LN1@PspIdleThr

; 515  : 		HalTaskSwitch();

  00012	e8 00 00 00 00	 call	 _HalTaskSwitch

; 516  : 	}

  00017	eb f0		 jmp	 SHORT $LN2@PspIdleThr
$LN1@PspIdleThr:

; 517  : 
; 518  : 	return 0;

  00019	33 c0		 xor	 eax, eax

; 519  : }

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
_PspIdleThread ENDP
_TEXT	ENDS
EXTRN	_MmFreeNonCachedMemory:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT _PspProcessCutterThread
_TEXT	SEGMENT
_pt_cur_thread$ = -16					; size = 4
_pt_cur_process$ = -12					; size = 4
_pt_prev_process$ = -8					; size = 4
_ProcessHandle$ = -4					; size = 4
_StartContext$ = 8					; size = 4
_PspProcessCutterThread PROC				; COMDAT

; 523  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN9@PspProcess:

; 524  : 	HANDLE ProcessHandle;
; 525  : 	PPROCESS_CONTROL_BLOCK	*pt_prev_process, *pt_cur_process;
; 526  : 	PTHREAD_CONTROL_BLOCK	*pt_cur_thread;
; 527  : 
; 528  : 	while(1){

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	85 c0		 test	 eax, eax
  00010	0f 84 d2 00 00
	00		 je	 $LN8@PspProcess

; 529  : 		if(!PspPopCuttingItem(&m_ProcessCuttingList, &ProcessHandle)){

  00016	8d 45 fc	 lea	 eax, DWORD PTR _ProcessHandle$[ebp]
  00019	50		 push	 eax
  0001a	68 00 00 00 00	 push	 OFFSET _m_ProcessCuttingList
  0001f	e8 00 00 00 00	 call	 _PspPopCuttingItem
  00024	83 c4 08	 add	 esp, 8
  00027	85 c0		 test	 eax, eax
  00029	75 07		 jne	 SHORT $LN7@PspProcess

; 530  : 			HalTaskSwitch();

  0002b	e8 00 00 00 00	 call	 _HalTaskSwitch

; 531  : 			continue;

  00030	eb d7		 jmp	 SHORT $LN9@PspProcess
$LN7@PspProcess:

; 532  : 		}
; 533  : ENTER_CRITICAL_SECTION();

  00032	9c		 pushfd
  00033	fa		 cli

; 534  : 	//삭제할 프로세스가 시스템프로세스인지 확인
; 535  : 	if(ProcessHandle == PsGetThreadPtr(PsGetCurrentThread())->parent_process_handle){

  00034	e8 00 00 00 00	 call	 _PsGetCurrentThread
  00039	8b 4d fc	 mov	 ecx, DWORD PTR _ProcessHandle$[ebp]
  0003c	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0003e	75 05		 jne	 SHORT $LN6@PspProcess

; 536  : 		goto $exit;

  00040	e9 9d 00 00 00	 jmp	 $$exit$1186
$LN6@PspProcess:

; 537  : 	}
; 538  : 	
; 539  : 
; 540  : 	pt_prev_process = pt_cur_process = &(m_ProcMgrBlk.pt_head_process);

  00045	c7 45 f4 0c 00
	00 00		 mov	 DWORD PTR _pt_cur_process$[ebp], OFFSET _m_ProcMgrBlk+12
  0004c	8b 45 f4	 mov	 eax, DWORD PTR _pt_cur_process$[ebp]
  0004f	89 45 f8	 mov	 DWORD PTR _pt_prev_process$[ebp], eax
$LN5@PspProcess:

; 541  : 	while(*pt_cur_process != PsGetProcessPtr(ProcessHandle)){

  00052	8b 45 f4	 mov	 eax, DWORD PTR _pt_cur_process$[ebp]
  00055	8b 08		 mov	 ecx, DWORD PTR [eax]
  00057	3b 4d fc	 cmp	 ecx, DWORD PTR _ProcessHandle$[ebp]
  0005a	74 20		 je	 SHORT $LN4@PspProcess

; 542  : 		//리스트 내에서 현재 프로세스가 마지막 프로세스일 경우 종료
; 543  : 		if((*pt_cur_process)->pt_next_process == NULL){

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _pt_cur_process$[ebp]
  0005f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00061	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00065	75 02		 jne	 SHORT $LN3@PspProcess

; 544  : 			goto $exit;

  00067	eb 79		 jmp	 SHORT $$exit$1186
$LN3@PspProcess:

; 545  : 		}
; 546  : 		pt_prev_process = pt_cur_process;

  00069	8b 45 f4	 mov	 eax, DWORD PTR _pt_cur_process$[ebp]
  0006c	89 45 f8	 mov	 DWORD PTR _pt_prev_process$[ebp], eax

; 547  : 		pt_cur_process = &((*pt_cur_process)->pt_next_process);

  0006f	8b 45 f4	 mov	 eax, DWORD PTR _pt_cur_process$[ebp]
  00072	8b 08		 mov	 ecx, DWORD PTR [eax]
  00074	83 c1 08	 add	 ecx, 8
  00077	89 4d f4	 mov	 DWORD PTR _pt_cur_process$[ebp], ecx

; 548  : 	}

  0007a	eb d6		 jmp	 SHORT $LN5@PspProcess
$LN4@PspProcess:

; 549  : 	// 다음 프로세스를 받아온다.
; 550  : 	(*pt_prev_process)->pt_next_process = (*pt_cur_process)->pt_next_process;

  0007c	8b 45 f4	 mov	 eax, DWORD PTR _pt_cur_process$[ebp]
  0007f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00081	8b 55 f8	 mov	 edx, DWORD PTR _pt_prev_process$[ebp]
  00084	8b 02		 mov	 eax, DWORD PTR [edx]
  00086	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00089	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 551  : 	m_ProcMgrBlk.process_count--;

  0008c	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_ProcMgrBlk
  00091	83 e8 01	 sub	 eax, 1
  00094	a3 00 00 00 00	 mov	 DWORD PTR _m_ProcMgrBlk, eax

; 552  : 
; 553  : 	// 삭제할 프로세스를 찾았다면 해당 프로세스 내에 모든 쓰레드에 할당된 메모리 해제
; 554  : 	pt_cur_thread = &(PsGetProcessPtr(ProcessHandle)->pt_head_thread);

  00099	8b 45 fc	 mov	 eax, DWORD PTR _ProcessHandle$[ebp]
  0009c	83 c0 14	 add	 eax, 20			; 00000014H
  0009f	89 45 f0	 mov	 DWORD PTR _pt_cur_thread$[ebp], eax
$LN2@PspProcess:

; 555  : 	while(*pt_cur_thread != NULL){

  000a2	8b 45 f0	 mov	 eax, DWORD PTR _pt_cur_thread$[ebp]
  000a5	83 38 00	 cmp	 DWORD PTR [eax], 0
  000a8	74 2c		 je	 SHORT $LN1@PspProcess

; 556  : 		MmFreeNonCachedMemory((PVOID)((*pt_cur_thread)->pt_stack_base_address));

  000aa	8b 45 f0	 mov	 eax, DWORD PTR _pt_cur_thread$[ebp]
  000ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  000af	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000b2	52		 push	 edx
  000b3	e8 00 00 00 00	 call	 _MmFreeNonCachedMemory
  000b8	83 c4 04	 add	 esp, 4

; 557  : 		MmFreeNonCachedMemory((PVOID)(*pt_cur_thread));

  000bb	8b 45 f0	 mov	 eax, DWORD PTR _pt_cur_thread$[ebp]
  000be	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c0	51		 push	 ecx
  000c1	e8 00 00 00 00	 call	 _MmFreeNonCachedMemory
  000c6	83 c4 04	 add	 esp, 4

; 558  : 		pt_cur_thread = &((*pt_cur_thread)->pt_next_thread);

  000c9	8b 45 f0	 mov	 eax, DWORD PTR _pt_cur_thread$[ebp]
  000cc	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ce	83 c1 14	 add	 ecx, 20			; 00000014H
  000d1	89 4d f0	 mov	 DWORD PTR _pt_cur_thread$[ebp], ecx

; 559  : 	}

  000d4	eb cc		 jmp	 SHORT $LN2@PspProcess
$LN1@PspProcess:

; 560  : 	// 삭제할 프로세스 자체 메모리도 해제
; 561  : 	MmFreeNonCachedMemory((PVOID)ProcessHandle);

  000d6	8b 45 fc	 mov	 eax, DWORD PTR _ProcessHandle$[ebp]
  000d9	50		 push	 eax
  000da	e8 00 00 00 00	 call	 _MmFreeNonCachedMemory
  000df	83 c4 04	 add	 esp, 4
$$exit$1186:

; 562  : 
; 563  : $exit:
; 564  : EXIT_CRITICAL_SECTION();

  000e2	9d		 popfd

; 565  : 	}

  000e3	e9 21 ff ff ff	 jmp	 $LN9@PspProcess
$LN8@PspProcess:

; 566  : 
; 567  : 	return 0;

  000e8	33 c0		 xor	 eax, eax

; 568  : }

  000ea	5f		 pop	 edi
  000eb	5e		 pop	 esi
  000ec	5b		 pop	 ebx
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c3		 ret	 0
_PspProcessCutterThread ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _PspPopCuttingItem
_TEXT	SEGMENT
_bResult$ = -4						; size = 4
_pCuttingList$ = 8					; size = 4
_pItem$ = 12						; size = 4
_PspPopCuttingItem PROC					; COMDAT

; 315  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 316  : 	BOOL bResult = TRUE;

  00009	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _bResult$[ebp], 1

; 317  : 
; 318  : ENTER_CRITICAL_SECTION();

  00010	9c		 pushfd
  00011	fa		 cli

; 319  : 	{
; 320  : 		// 커터 큐에 카운터 체크
; 321  : 		if(pCuttingList->count == 0){

  00012	8b 45 08	 mov	 eax, DWORD PTR _pCuttingList$[ebp]
  00015	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00018	85 c9		 test	 ecx, ecx
  0001a	75 09		 jne	 SHORT $LN2@PspPopCutt

; 322  : 			bResult = FALSE;

  0001c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _bResult$[ebp], 0

; 323  : 			goto $exit;

  00023	eb 41		 jmp	 SHORT $$exit$1067
$LN2@PspPopCutt:

; 324  : 		}
; 325  : 
; 326  : 		//POP
; 327  : 		pCuttingList->count--;

  00025	8b 45 08	 mov	 eax, DWORD PTR _pCuttingList$[ebp]
  00028	8a 08		 mov	 cl, BYTE PTR [eax]
  0002a	80 e9 01	 sub	 cl, 1
  0002d	8b 55 08	 mov	 edx, DWORD PTR _pCuttingList$[ebp]
  00030	88 0a		 mov	 BYTE PTR [edx], cl

; 328  : 		*pItem = pCuttingList->handle_list[pCuttingList->head++];

  00032	8b 45 08	 mov	 eax, DWORD PTR _pCuttingList$[ebp]
  00035	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00039	8b 55 0c	 mov	 edx, DWORD PTR _pItem$[ebp]
  0003c	8b 45 08	 mov	 eax, DWORD PTR _pCuttingList$[ebp]
  0003f	8b 4c 88 03	 mov	 ecx, DWORD PTR [eax+ecx*4+3]
  00043	89 0a		 mov	 DWORD PTR [edx], ecx
  00045	8b 55 08	 mov	 edx, DWORD PTR _pCuttingList$[ebp]
  00048	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  0004b	04 01		 add	 al, 1
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _pCuttingList$[ebp]
  00050	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 329  : 		if(pCuttingList->head >= MAX_CUTTING_ITEM)

  00053	8b 45 08	 mov	 eax, DWORD PTR _pCuttingList$[ebp]
  00056	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  0005a	83 f9 1e	 cmp	 ecx, 30			; 0000001eH
  0005d	7c 07		 jl	 SHORT $$exit$1067

; 330  : 			pCuttingList->head = 0;

  0005f	8b 45 08	 mov	 eax, DWORD PTR _pCuttingList$[ebp]
  00062	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
$$exit$1067:

; 331  : 	}
; 332  : $exit:
; 333  : EXIT_CRITICAL_SECTION();

  00066	9d		 popfd

; 334  : 	return bResult;

  00067	8b 45 fc	 mov	 eax, DWORD PTR _bResult$[ebp]

; 335  : }

  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_PspPopCuttingItem ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _PspThreadCutterThread
_TEXT	SEGMENT
_pt_cur_thread$ = -16					; size = 4
_pt_prev_thread$ = -12					; size = 4
_ThreadHandle$ = -8					; size = 4
_ProcessHandle$ = -4					; size = 4
_StartContext$ = 8					; size = 4
_PspThreadCutterThread PROC				; COMDAT

; 573  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN12@PspThreadC:

; 574  : 	HANDLE ProcessHandle, ThreadHandle;
; 575  : 	PTHREAD_CONTROL_BLOCK *pt_prev_thread, *pt_cur_thread;
; 576  : 
; 577  : 	while(1){

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	85 c0		 test	 eax, eax
  00010	0f 84 e1 00 00
	00		 je	 $LN11@PspThreadC

; 578  : 		//thread의 cutting list 확인
; 579  : 		if(!PspPopCuttingItem(&m_ThreadCuttingList, &ThreadHandle)){

  00016	8d 45 f8	 lea	 eax, DWORD PTR _ThreadHandle$[ebp]
  00019	50		 push	 eax
  0001a	68 00 00 00 00	 push	 OFFSET _m_ThreadCuttingList
  0001f	e8 00 00 00 00	 call	 _PspPopCuttingItem
  00024	83 c4 08	 add	 esp, 8
  00027	85 c0		 test	 eax, eax
  00029	75 07		 jne	 SHORT $LN10@PspThreadC

; 580  : 			HalTaskSwitch();

  0002b	e8 00 00 00 00	 call	 _HalTaskSwitch

; 581  : 			continue;

  00030	eb d7		 jmp	 SHORT $LN12@PspThreadC
$LN10@PspThreadC:

; 582  : 		}
; 583  : ENTER_CRITICAL_SECTION();

  00032	9c		 pushfd
  00033	fa		 cli

; 584  : 	ProcessHandle = PsGetThreadPtr(ThreadHandle)->parent_process_handle;

  00034	8b 45 f8	 mov	 eax, DWORD PTR _ThreadHandle$[ebp]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]
  00039	89 4d fc	 mov	 DWORD PTR _ProcessHandle$[ebp], ecx

; 585  : 	//삭제할 쓰레드가 속해있는 프로세스가 시스템 프로세스인지 확인
; 586  : 	if(ProcessHandle == PsGetThreadPtr(PsGetCurrentThread())->parent_process_handle){

  0003c	e8 00 00 00 00	 call	 _PsGetCurrentThread
  00041	8b 4d fc	 mov	 ecx, DWORD PTR _ProcessHandle$[ebp]
  00044	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00046	75 05		 jne	 SHORT $LN9@PspThreadC

; 587  : 		goto $exit;

  00048	e9 a4 00 00 00	 jmp	 $$exit$1214
$LN9@PspThreadC:

; 588  : 	}
; 589  : 	//TCB에서 쓰레드 수가 없을 경우 
; 590  : 	if(PsGetProcessPtr(ProcessHandle)->thread_count == 0){

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _ProcessHandle$[ebp]
  00050	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00054	75 07		 jne	 SHORT $LN8@PspThreadC
  00056	e9 96 00 00 00	 jmp	 $$exit$1214

; 591  : 		goto $exit;

  0005b	eb 5e		 jmp	 SHORT $LN7@PspThreadC
$LN8@PspThreadC:

; 592  : 	}
; 593  : 	// 속해있는 프로세스 내에서 한개의 쓰레드만 존재
; 594  : 	else if (PsGetProcessPtr(ProcessHandle)->thread_count == 1){

  0005d	8b 45 fc	 mov	 eax, DWORD PTR _ProcessHandle$[ebp]
  00060	83 78 0c 01	 cmp	 DWORD PTR [eax+12], 1
  00064	75 0c		 jne	 SHORT $LN6@PspThreadC

; 595  : 		PsGetProcessPtr(ProcessHandle)->pt_head_thread = NULL;

  00066	8b 45 fc	 mov	 eax, DWORD PTR _ProcessHandle$[ebp]
  00069	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 596  : 	}
; 597  : 	// 두개의 쓰레드 존재
; 598  : 	else{

  00070	eb 49		 jmp	 SHORT $LN7@PspThreadC
$LN6@PspThreadC:

; 599  : 		pt_prev_thread = pt_cur_thread = &(PsGetProcessPtr(ProcessHandle)->pt_head_thread);

  00072	8b 45 fc	 mov	 eax, DWORD PTR _ProcessHandle$[ebp]
  00075	83 c0 14	 add	 eax, 20			; 00000014H
  00078	89 45 f0	 mov	 DWORD PTR _pt_cur_thread$[ebp], eax
  0007b	8b 4d f0	 mov	 ecx, DWORD PTR _pt_cur_thread$[ebp]
  0007e	89 4d f4	 mov	 DWORD PTR _pt_prev_thread$[ebp], ecx
$LN4@PspThreadC:

; 600  : 		while(*pt_cur_thread != PsGetThreadPtr(ThreadHandle)){

  00081	8b 45 f0	 mov	 eax, DWORD PTR _pt_cur_thread$[ebp]
  00084	8b 08		 mov	 ecx, DWORD PTR [eax]
  00086	3b 4d f8	 cmp	 ecx, DWORD PTR _ThreadHandle$[ebp]
  00089	74 20		 je	 SHORT $LN3@PspThreadC

; 601  : 			if((*pt_cur_thread)->pt_next_thread == NULL){

  0008b	8b 45 f0	 mov	 eax, DWORD PTR _pt_cur_thread$[ebp]
  0008e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00090	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  00094	75 02		 jne	 SHORT $LN2@PspThreadC

; 602  : 				goto $exit;

  00096	eb 59		 jmp	 SHORT $$exit$1214
$LN2@PspThreadC:

; 603  : 			}
; 604  : 			pt_prev_thread = pt_cur_thread;

  00098	8b 45 f0	 mov	 eax, DWORD PTR _pt_cur_thread$[ebp]
  0009b	89 45 f4	 mov	 DWORD PTR _pt_prev_thread$[ebp], eax

; 605  : 			pt_cur_thread = &((*pt_cur_thread)->pt_next_thread);

  0009e	8b 45 f0	 mov	 eax, DWORD PTR _pt_cur_thread$[ebp]
  000a1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a3	83 c1 14	 add	 ecx, 20			; 00000014H
  000a6	89 4d f0	 mov	 DWORD PTR _pt_cur_thread$[ebp], ecx

; 606  : 		}

  000a9	eb d6		 jmp	 SHORT $LN4@PspThreadC
$LN3@PspThreadC:

; 607  : 		//다음 쓰레드 포인트 가져온다
; 608  : 		(*pt_prev_thread)->pt_next_thread = (*pt_cur_thread)->pt_next_thread;

  000ab	8b 45 f0	 mov	 eax, DWORD PTR _pt_cur_thread$[ebp]
  000ae	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b0	8b 55 f4	 mov	 edx, DWORD PTR _pt_prev_thread$[ebp]
  000b3	8b 02		 mov	 eax, DWORD PTR [edx]
  000b5	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  000b8	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN7@PspThreadC:

; 609  : 	}
; 610  : 	PsGetProcessPtr(ProcessHandle)->thread_count--;

  000bb	8b 45 fc	 mov	 eax, DWORD PTR _ProcessHandle$[ebp]
  000be	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000c1	83 e9 01	 sub	 ecx, 1
  000c4	8b 55 fc	 mov	 edx, DWORD PTR _ProcessHandle$[ebp]
  000c7	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 611  : 
; 612  : 	if(PsGetThreadPtr(ThreadHandle)->pt_stack_base_address >= (int *)0x00200000)

  000ca	8b 45 f8	 mov	 eax, DWORD PTR _ThreadHandle$[ebp]
  000cd	81 78 20 00 00
	20 00		 cmp	 DWORD PTR [eax+32], 2097152 ; 00200000H
  000d4	72 0f		 jb	 SHORT $LN1@PspThreadC

; 613  : 		// 스택영역 할당 해제
; 614  : 		MmFreeNonCachedMemory((PVOID)(PsGetThreadPtr(ThreadHandle)->pt_stack_base_address));

  000d6	8b 45 f8	 mov	 eax, DWORD PTR _ThreadHandle$[ebp]
  000d9	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  000dc	51		 push	 ecx
  000dd	e8 00 00 00 00	 call	 _MmFreeNonCachedMemory
  000e2	83 c4 04	 add	 esp, 4
$LN1@PspThreadC:

; 615  : 	//쓰레드 자체 메모리 해제
; 616  : 	MmFreeNonCachedMemory((PVOID)(PsGetThreadPtr(ThreadHandle)));

  000e5	8b 45 f8	 mov	 eax, DWORD PTR _ThreadHandle$[ebp]
  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 _MmFreeNonCachedMemory
  000ee	83 c4 04	 add	 esp, 4
$$exit$1214:

; 617  : 
; 618  : $exit:
; 619  : EXIT_CRITICAL_SECTION();

  000f1	9d		 popfd

; 620  : 	}

  000f2	e9 12 ff ff ff	 jmp	 $LN12@PspThreadC
$LN11@PspThreadC:

; 621  : 
; 622  : 	return 0;

  000f7	33 c0		 xor	 eax, eax

; 623  : }

  000f9	5f		 pop	 edi
  000fa	5e		 pop	 esi
  000fb	5b		 pop	 ebx
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c3		 ret	 0
_PspThreadCutterThread ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _PspSoftTaskSW
_TEXT	SEGMENT
_status$ = -20						; size = 8
_addr$ = -12						; size = 4
_pos$ = -8						; size = 4
_cnt$ = -4						; size = 4
_StartContext$ = 8					; size = 4
_PspSoftTaskSW PROC					; COMDAT

; 627  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 628  : 	int cnt=0, pos=0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _cnt$[ebp], 0
  00010	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pos$[ebp], 0

; 629  : 	char *addr=(char *)TS_WATCHDOG_CLOCK_POS, status[] = {'-', '\\', '|', '/', '-', '\\', '|', '/'}; 

  00017	c7 45 f4 9e 80
	0b 00		 mov	 DWORD PTR _addr$[ebp], 753822 ; 000b809eH
  0001e	c6 45 ec 2d	 mov	 BYTE PTR _status$[ebp], 45 ; 0000002dH
  00022	c6 45 ed 5c	 mov	 BYTE PTR _status$[ebp+1], 92 ; 0000005cH
  00026	c6 45 ee 7c	 mov	 BYTE PTR _status$[ebp+2], 124 ; 0000007cH
  0002a	c6 45 ef 2f	 mov	 BYTE PTR _status$[ebp+3], 47 ; 0000002fH
  0002e	c6 45 f0 2d	 mov	 BYTE PTR _status$[ebp+4], 45 ; 0000002dH
  00032	c6 45 f1 5c	 mov	 BYTE PTR _status$[ebp+5], 92 ; 0000005cH
  00036	c6 45 f2 7c	 mov	 BYTE PTR _status$[ebp+6], 124 ; 0000007cH
  0003a	c6 45 f3 2f	 mov	 BYTE PTR _status$[ebp+7], 47 ; 0000002fH
$LN5@PspSoftTas:

; 630  : 
; 631  : 	while(1){

  0003e	b8 01 00 00 00	 mov	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 4c		 je	 SHORT $LN4@PspSoftTas

; 632  : 		//인터럽 불가
; 633  : 		_asm cli

  00047	fa		 cli

; 634  : 		//실행화면에 바람개비 표시
; 635  : 		if(cnt++ >= TIMEOUT_PER_SECOND){

  00048	8b 45 fc	 mov	 eax, DWORD PTR _cnt$[ebp]
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _cnt$[ebp]
  0004e	83 c1 01	 add	 ecx, 1
  00051	89 4d fc	 mov	 DWORD PTR _cnt$[ebp], ecx
  00054	83 f8 32	 cmp	 eax, 50			; 00000032H
  00057	7c 32		 jl	 SHORT $LN3@PspSoftTas

; 636  : 			if(++pos > 7) pos = 0;

  00059	8b 45 f8	 mov	 eax, DWORD PTR _pos$[ebp]
  0005c	83 c0 01	 add	 eax, 1
  0005f	89 45 f8	 mov	 DWORD PTR _pos$[ebp], eax
  00062	83 7d f8 07	 cmp	 DWORD PTR _pos$[ebp], 7
  00066	7e 07		 jle	 SHORT $LN2@PspSoftTas
  00068	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pos$[ebp], 0
$LN2@PspSoftTas:

; 637  : 			cnt = 0;

  0006f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _cnt$[ebp], 0

; 638  : 			if(m_bShowTSWatchdogClock)

  00076	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _m_bShowTSWatchdogClock, 0
  0007d	74 0c		 je	 SHORT $LN3@PspSoftTas

; 639  : 				*addr = status[pos];

  0007f	8b 45 f4	 mov	 eax, DWORD PTR _addr$[ebp]
  00082	8b 4d f8	 mov	 ecx, DWORD PTR _pos$[ebp]
  00085	8a 54 0d ec	 mov	 dl, BYTE PTR _status$[ebp+ecx]
  00089	88 10		 mov	 BYTE PTR [eax], dl
$LN3@PspSoftTas:

; 640  : 		}
; 641  : 		// 태스크 스위칭하는 함수 호출
; 642  : 		PspSetupTaskSWEnv();

  0008b	e8 00 00 00 00	 call	 _PspSetupTaskSWEnv

; 643  : 		// 인터럽 처리 시에 모든 처리를 완료하고 다시 태스크로 복귀
; 644  : 		_asm iretd

  00090	cf		 iretd

; 645  : 	}

  00091	eb ab		 jmp	 SHORT $LN5@PspSoftTas
$LN4@PspSoftTas:

; 646  : 
; 647  : 	return 0;

  00093	33 c0		 xor	 eax, eax

; 648  : }

  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
_PspSoftTaskSW ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _PspSetupTaskSWEnv
_TEXT	SEGMENT
_next_thread$ = -8					; size = 4
_current_thread$ = -4					; size = 4
_PspSetupTaskSWEnv PROC					; COMDAT

; 479  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 480  : 	HANDLE current_thread, next_thread;
; 481  : 	// 현재 실행되는 쓰레드를 가져옴
; 482  : 	current_thread = PsGetCurrentThread();

  00009	e8 00 00 00 00	 call	 _PsGetCurrentThread
  0000e	89 45 fc	 mov	 DWORD PTR _current_thread$[ebp], eax

; 483  : 	// 다음 실행가능한 쓰레드를 찾는다
; 484  : 	next_thread = PspFindNextThreadScheduled();

  00011	e8 00 00 00 00	 call	 _PspFindNextThreadScheduled
  00016	89 45 f8	 mov	 DWORD PTR _next_thread$[ebp], eax

; 485  : 
; 486  : 	// 현재 쓰레드의 상태를 확인하여 종료상태일 경우 프로세스 제거 
; 487  : 	if(PsGetThreadPtr(current_thread)->thread_status == THREAD_STATUS_TERMINATED){

  00019	8b 45 fc	 mov	 eax, DWORD PTR _current_thread$[ebp]
  0001c	83 78 0c 01	 cmp	 DWORD PTR [eax+12], 1
  00020	75 17		 jne	 SHORT $LN9@PspSetupTa

; 488  : 		if(PsGetThreadPtr(current_thread)->auto_delete){

  00022	8b 45 fc	 mov	 eax, DWORD PTR _current_thread$[ebp]
  00025	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00029	74 0c		 je	 SHORT $LN8@PspSetupTa

; 489  : 			PsDeleteThread(current_thread);

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _current_thread$[ebp]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 _PsDeleteThread
  00034	83 c4 04	 add	 esp, 4
$LN8@PspSetupTa:

; 490  : 		}

  00037	eb 62		 jmp	 SHORT $LN7@PspSetupTa
$LN9@PspSetupTa:

; 491  : 	} // 실행중인 상태일 경우, 다음 스케줄링 시 재개될 수 있도록 실행대기 상태로 변경 - 다시 실행될 수 있으므로 해당 priority queue에 넣어준다
; 492  : 	else if(PsGetThreadPtr(current_thread)->thread_status == THREAD_STATUS_RUNNING){

  00039	8b 45 fc	 mov	 eax, DWORD PTR _current_thread$[ebp]
  0003c	83 78 0c 04	 cmp	 DWORD PTR [eax+12], 4
  00040	75 59		 jne	 SHORT $LN7@PspSetupTa

; 493  : 		PsGetThreadPtr(current_thread)->thread_status = THREAD_STATUS_READY;

  00042	8b 45 fc	 mov	 eax, DWORD PTR _current_thread$[ebp]
  00045	c7 40 0c 02 00
	00 00		 mov	 DWORD PTR [eax+12], 2

; 494  : 		if(PsGetThreadPtr(current_thread)->priority == PRIORITY_HIGH)

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _current_thread$[ebp]
  0004f	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  00056	75 13		 jne	 SHORT $LN5@PspSetupTa

; 495  : 			PspPushScheduleData(&highQ, current_thread);

  00058	8b 45 fc	 mov	 eax, DWORD PTR _current_thread$[ebp]
  0005b	50		 push	 eax
  0005c	68 00 00 00 00	 push	 OFFSET _highQ
  00061	e8 00 00 00 00	 call	 _PspPushScheduleData
  00066	83 c4 08	 add	 esp, 8
  00069	eb 30		 jmp	 SHORT $LN7@PspSetupTa
$LN5@PspSetupTa:

; 496  : 		else if(PsGetThreadPtr(current_thread)->priority == PRIORITY_NORMAL)

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _current_thread$[ebp]
  0006e	83 b8 90 00 00
	00 01		 cmp	 DWORD PTR [eax+144], 1
  00075	75 13		 jne	 SHORT $LN3@PspSetupTa

; 497  : 			PspPushScheduleData(&normalQ, current_thread);

  00077	8b 45 fc	 mov	 eax, DWORD PTR _current_thread$[ebp]
  0007a	50		 push	 eax
  0007b	68 00 00 00 00	 push	 OFFSET _normalQ
  00080	e8 00 00 00 00	 call	 _PspPushScheduleData
  00085	83 c4 08	 add	 esp, 8

; 498  : 		else

  00088	eb 11		 jmp	 SHORT $LN7@PspSetupTa
$LN3@PspSetupTa:

; 499  : 			PspPushScheduleData(&lowQ, current_thread);

  0008a	8b 45 fc	 mov	 eax, DWORD PTR _current_thread$[ebp]
  0008d	50		 push	 eax
  0008e	68 00 00 00 00	 push	 OFFSET _lowQ
  00093	e8 00 00 00 00	 call	 _PspPushScheduleData
  00098	83 c4 08	 add	 esp, 8
$LN7@PspSetupTa:

; 500  : 	}
; 501  : 
; 502  : 	// 태스크 스위칭
; 503  : 	if(current_thread != next_thread && next_thread != NULL){

  0009b	8b 45 fc	 mov	 eax, DWORD PTR _current_thread$[ebp]
  0009e	3b 45 f8	 cmp	 eax, DWORD PTR _next_thread$[ebp]
  000a1	74 25		 je	 SHORT $LN10@PspSetupTa
  000a3	83 7d f8 00	 cmp	 DWORD PTR _next_thread$[ebp], 0
  000a7	74 1f		 je	 SHORT $LN10@PspSetupTa

; 504  : 		HalWriteTssIntoGdt(&PsGetThreadPtr(next_thread)->thread_tss32, sizeof(TSS_32), TASK_SW_SEG, TRUE);

  000a9	6a 01		 push	 1
  000ab	6a 28		 push	 40			; 00000028H
  000ad	6a 68		 push	 104			; 00000068H
  000af	8b 45 f8	 mov	 eax, DWORD PTR _next_thread$[ebp]
  000b2	83 c0 28	 add	 eax, 40			; 00000028H
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 _HalWriteTssIntoGdt
  000bb	83 c4 10	 add	 esp, 16			; 00000010H

; 505  : 		PsGetThreadPtr(current_thread)->thread_status = THREAD_STATUS_RUNNING;

  000be	8b 45 fc	 mov	 eax, DWORD PTR _current_thread$[ebp]
  000c1	c7 40 0c 04 00
	00 00		 mov	 DWORD PTR [eax+12], 4
$LN10@PspSetupTa:

; 506  : 	}
; 507  : }

  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi
  000ca	5b		 pop	 ebx
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
_PspSetupTaskSWEnv ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _PspFindNextThreadScheduled
_TEXT	SEGMENT
_handle$ = -16						; size = 4
_pQueue$ = -12						; size = 4
_pt_process$ = -8					; size = 4
_pt_thread$ = -4					; size = 4
_PspFindNextThreadScheduled PROC			; COMDAT

; 418  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 419  : 	PTHREAD_CONTROL_BLOCK	pt_thread;
; 420  : 	PPROCESS_CONTROL_BLOCK	pt_process;
; 421  : 
; 422  : 	PRIORITY_QUEUE *pQueue;
; 423  : 
; 424  : 	HANDLE handle;
; 425  : 
; 426  : 	if(m_ProcMgrBlk.process_count == 0 || m_ProcMgrBlk.pt_current_thread == NULL || m_ProcMgrBlk.pt_head_process == NULL){

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _m_ProcMgrBlk, 0
  00010	74 12		 je	 SHORT $LN19@PspFindNex
  00012	83 3d 08 00 00
	00 00		 cmp	 DWORD PTR _m_ProcMgrBlk+8, 0
  00019	74 09		 je	 SHORT $LN19@PspFindNex
  0001b	83 3d 0c 00 00
	00 00		 cmp	 DWORD PTR _m_ProcMgrBlk+12, 0
  00022	75 07		 jne	 SHORT $LN20@PspFindNex
$LN19@PspFindNex:

; 427  : 		return NULL;

  00024	33 c0		 xor	 eax, eax
  00026	e9 21 01 00 00	 jmp	 $LN21@PspFindNex
$LN20@PspFindNex:

; 428  : 	}
; 429  : 
; 430  : 	pt_thread = m_ProcMgrBlk.pt_current_thread;

  0002b	a1 08 00 00 00	 mov	 eax, DWORD PTR _m_ProcMgrBlk+8
  00030	89 45 fc	 mov	 DWORD PTR _pt_thread$[ebp], eax

; 431  : 
; 432  : 	if(current_schedule_priority == PRIORITY_HIGH)

  00033	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _current_schedule_priority, 0
  0003a	75 09		 jne	 SHORT $LN18@PspFindNex

; 433  : 		pQueue = &highQ;

  0003c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pQueue$[ebp], OFFSET _highQ
  00043	eb 19		 jmp	 SHORT $LN14@PspFindNex
$LN18@PspFindNex:

; 434  : 	else if(current_schedule_priority == PRIORITY_NORMAL)

  00045	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _current_schedule_priority, 1
  0004c	75 09		 jne	 SHORT $LN16@PspFindNex

; 435  : 		pQueue = &normalQ;

  0004e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pQueue$[ebp], OFFSET _normalQ

; 436  : 	else

  00055	eb 07		 jmp	 SHORT $LN14@PspFindNex
$LN16@PspFindNex:

; 437  : 		pQueue = &lowQ;

  00057	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pQueue$[ebp], OFFSET _lowQ
$LN14@PspFindNex:

; 438  : 	
; 439  : 	while(pQueue->front != NULL && PsGetThreadPtr(pQueue->front->thread)->thread_status != THREAD_STATUS_READY &&
; 440  : 		PsGetThreadPtr(pQueue->front->thread)->thread_status != THREAD_STATUS_RUNNING)

  0005e	8b 45 f4	 mov	 eax, DWORD PTR _pQueue$[ebp]
  00061	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00065	74 2e		 je	 SHORT $LN13@PspFindNex
  00067	8b 45 f4	 mov	 eax, DWORD PTR _pQueue$[ebp]
  0006a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0006f	83 7a 0c 02	 cmp	 DWORD PTR [edx+12], 2
  00073	74 20		 je	 SHORT $LN13@PspFindNex
  00075	8b 45 f4	 mov	 eax, DWORD PTR _pQueue$[ebp]
  00078	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0007b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007d	83 7a 0c 04	 cmp	 DWORD PTR [edx+12], 4
  00081	74 12		 je	 SHORT $LN13@PspFindNex

; 441  : 		PspPopScheduleData(pQueue, &handle);

  00083	8d 45 f0	 lea	 eax, DWORD PTR _handle$[ebp]
  00086	50		 push	 eax
  00087	8b 4d f4	 mov	 ecx, DWORD PTR _pQueue$[ebp]
  0008a	51		 push	 ecx
  0008b	e8 00 00 00 00	 call	 _PspPopScheduleData
  00090	83 c4 08	 add	 esp, 8
  00093	eb c9		 jmp	 SHORT $LN14@PspFindNex
$LN13@PspFindNex:

; 442  : 
; 443  : 	if(pQueue->front != NULL){

  00095	8b 45 f4	 mov	 eax, DWORD PTR _pQueue$[ebp]
  00098	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0009c	74 18		 je	 SHORT $LN12@PspFindNex

; 444  : 		PspPopScheduleData(pQueue, &handle);

  0009e	8d 45 f0	 lea	 eax, DWORD PTR _handle$[ebp]
  000a1	50		 push	 eax
  000a2	8b 4d f4	 mov	 ecx, DWORD PTR _pQueue$[ebp]
  000a5	51		 push	 ecx
  000a6	e8 00 00 00 00	 call	 _PspPopScheduleData
  000ab	83 c4 08	 add	 esp, 8

; 445  : 		pt_thread = PsGetThreadPtr(handle);

  000ae	8b 45 f0	 mov	 eax, DWORD PTR _handle$[ebp]
  000b1	89 45 fc	 mov	 DWORD PTR _pt_thread$[ebp], eax
  000b4	eb 10		 jmp	 SHORT $LN11@PspFindNex
$LN12@PspFindNex:

; 446  : 	} else if(pt_thread->thread_status == THREAD_STATUS_TERMINATED) // 큐가 비어있는 상태에 실행중이던 쓰레드도 종료된 상태

  000b6	8b 45 fc	 mov	 eax, DWORD PTR _pt_thread$[ebp]
  000b9	83 78 0c 01	 cmp	 DWORD PTR [eax+12], 1
  000bd	75 07		 jne	 SHORT $LN11@PspFindNex

; 447  : 		pt_thread = NULL;

  000bf	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pt_thread$[ebp], 0
$LN11@PspFindNex:

; 448  : 
; 449  : 	if(pt_thread == NULL) 

  000c6	83 7d fc 00	 cmp	 DWORD PTR _pt_thread$[ebp], 0
  000ca	75 08		 jne	 SHORT $$find_thread$1129

; 450  : 		pt_thread = m_ProcMgrBlk.pt_current_thread;

  000cc	a1 08 00 00 00	 mov	 eax, DWORD PTR _m_ProcMgrBlk+8
  000d1	89 45 fc	 mov	 DWORD PTR _pt_thread$[ebp], eax
$$find_thread$1129:

; 451  : $find_thread:
; 452  : 	if(pt_thread->pt_next_thread != NULL){

  000d4	8b 45 fc	 mov	 eax, DWORD PTR _pt_thread$[ebp]
  000d7	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  000db	74 0b		 je	 SHORT $LN6@PspFindNex

; 453  : 		pt_thread = pt_thread->pt_next_thread;

  000dd	8b 45 fc	 mov	 eax, DWORD PTR _pt_thread$[ebp]
  000e0	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000e3	89 4d fc	 mov	 DWORD PTR _pt_thread$[ebp], ecx

; 454  : 	} else{

  000e6	eb 45		 jmp	 SHORT $LN7@PspFindNex
$LN6@PspFindNex:

; 455  : 		while(1){

  000e8	b8 01 00 00 00	 mov	 eax, 1
  000ed	85 c0		 test	 eax, eax
  000ef	74 3c		 je	 SHORT $LN7@PspFindNex

; 456  : 			pt_process = PsGetProcessPtr(pt_thread->parent_process_handle)->pt_next_process;

  000f1	8b 45 fc	 mov	 eax, DWORD PTR _pt_thread$[ebp]
  000f4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f6	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000f9	89 55 f8	 mov	 DWORD PTR _pt_process$[ebp], edx
$$find_process$1136:

; 457  : $find_process:
; 458  : 			if(pt_process == NULL)

  000fc	83 7d f8 00	 cmp	 DWORD PTR _pt_process$[ebp], 0
  00100	75 08		 jne	 SHORT $LN4@PspFindNex

; 459  : 				pt_process = m_ProcMgrBlk.pt_head_process;

  00102	a1 0c 00 00 00	 mov	 eax, DWORD PTR _m_ProcMgrBlk+12
  00107	89 45 f8	 mov	 DWORD PTR _pt_process$[ebp], eax
$LN4@PspFindNex:

; 460  : 			if(pt_process->pt_head_thread == NULL){

  0010a	8b 45 f8	 mov	 eax, DWORD PTR _pt_process$[ebp]
  0010d	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00111	75 0d		 jne	 SHORT $LN3@PspFindNex

; 461  : 				pt_process = pt_process->pt_next_process;

  00113	8b 45 f8	 mov	 eax, DWORD PTR _pt_process$[ebp]
  00116	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00119	89 4d f8	 mov	 DWORD PTR _pt_process$[ebp], ecx

; 462  : 				goto $find_process;

  0011c	eb de		 jmp	 SHORT $$find_process$1136

; 463  : 			} else{

  0011e	eb 0b		 jmp	 SHORT $LN2@PspFindNex
$LN3@PspFindNex:

; 464  : 				pt_thread = pt_process->pt_head_thread;

  00120	8b 45 f8	 mov	 eax, DWORD PTR _pt_process$[ebp]
  00123	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00126	89 4d fc	 mov	 DWORD PTR _pt_thread$[ebp], ecx

; 465  : 				break;

  00129	eb 02		 jmp	 SHORT $LN7@PspFindNex
$LN2@PspFindNex:

; 466  : 			}
; 467  : 		}

  0012b	eb bb		 jmp	 SHORT $LN6@PspFindNex
$LN7@PspFindNex:

; 468  : 	}
; 469  : 	if(pt_thread->thread_status != THREAD_STATUS_READY && pt_thread->thread_status != THREAD_STATUS_RUNNING)

  0012d	8b 45 fc	 mov	 eax, DWORD PTR _pt_thread$[ebp]
  00130	83 78 0c 02	 cmp	 DWORD PTR [eax+12], 2
  00134	74 0b		 je	 SHORT $LN1@PspFindNex
  00136	8b 45 fc	 mov	 eax, DWORD PTR _pt_thread$[ebp]
  00139	83 78 0c 04	 cmp	 DWORD PTR [eax+12], 4
  0013d	74 02		 je	 SHORT $LN1@PspFindNex

; 470  : 		goto $find_thread;

  0013f	eb 93		 jmp	 SHORT $$find_thread$1129
$LN1@PspFindNex:

; 471  : 	m_ProcMgrBlk.pt_current_thread = pt_thread;

  00141	8b 45 fc	 mov	 eax, DWORD PTR _pt_thread$[ebp]
  00144	a3 08 00 00 00	 mov	 DWORD PTR _m_ProcMgrBlk+8, eax

; 472  : 
; 473  : 	return (HANDLE)pt_thread;

  00149	8b 45 fc	 mov	 eax, DWORD PTR _pt_thread$[ebp]
$LN21@PspFindNex:

; 474  : }

  0014c	5f		 pop	 edi
  0014d	5e		 pop	 esi
  0014e	5b		 pop	 ebx
  0014f	8b e5		 mov	 esp, ebp
  00151	5d		 pop	 ebp
  00152	c3		 ret	 0
_PspFindNextThreadScheduled ENDP
_TEXT	ENDS
EXTRN	_WRITE_PORT_UCHAR:PROC
_BSS	SEGMENT
_lowT	DD	01H DUP (?)
_normalT DD	01H DUP (?)
_highT	DD	01H DUP (?)
; Function compile flags: /Odtp /ZI
_BSS	ENDS
;	COMDAT _Psp_IRQ_SystemTimer
_TEXT	SEGMENT
_StartContext$ = 8					; size = 4
_Psp_IRQ_SystemTimer PROC				; COMDAT

; 652  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN12@Psp_IRQ_Sy:

; 653  : 	while(1){

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	85 c0		 test	 eax, eax
  00010	0f 84 fb 00 00
	00		 je	 $LN11@Psp_IRQ_Sy

; 654  : 		_asm cli

  00016	fa		 cli

; 655  : 		// 과제1을 위한 코드 추가!!!!!!!!
; 656  : 		// 10번의 타임 인터럽트 중 6번은 high, 3번은 normal, 1번은 low로 수행할 수 있도록 한다.
; 657  : 		// 순서는 high normal low 순으로 큐에서 꺼내간다.
; 658  : 		// 우선순위가 높은 큐들부터 확인을 하며 목표했던 횟수보다 적은 수를 수행 했으면 그 순위를 수행해준다.
; 659  : 		// high에서 3번을 수행한 뒤 큐가 비어있는 상태에서 normal을 2번 수행하다가 high가 다시 들어오면 high를 다시 수행해준다는 것이다.
; 660  : 		m_TickCount++; // tickcount값 1씩 증가

  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_TickCount
  0001c	83 c0 01	 add	 eax, 1
  0001f	a3 00 00 00 00	 mov	 DWORD PTR _m_TickCount, eax

; 661  : 
; 662  : 		if(highQ.count > 0 && highT < 6){

  00024	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _highQ, 0
  0002b	7e 25		 jle	 SHORT $LN10@Psp_IRQ_Sy
  0002d	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR _highT, 6
  00034	73 1c		 jae	 SHORT $LN10@Psp_IRQ_Sy

; 663  : 			highT++;

  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR _highT
  0003b	83 c0 01	 add	 eax, 1
  0003e	a3 00 00 00 00	 mov	 DWORD PTR _highT, eax

; 664  : 			current_schedule_priority = PRIORITY_HIGH;

  00043	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _current_schedule_priority, 0
  0004d	e9 a8 00 00 00	 jmp	 $LN9@Psp_IRQ_Sy
$LN10@Psp_IRQ_Sy:

; 665  : 		} else if (normalQ.count > 0 && normalT < 3){

  00052	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _normalQ, 0
  00059	7e 22		 jle	 SHORT $LN8@Psp_IRQ_Sy
  0005b	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _normalT, 3
  00062	73 19		 jae	 SHORT $LN8@Psp_IRQ_Sy

; 666  : 			normalT++;

  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR _normalT
  00069	83 c0 01	 add	 eax, 1
  0006c	a3 00 00 00 00	 mov	 DWORD PTR _normalT, eax

; 667  : 			current_schedule_priority = PRIORITY_NORMAL;

  00071	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _current_schedule_priority, 1
  0007b	eb 7d		 jmp	 SHORT $LN9@Psp_IRQ_Sy
$LN8@Psp_IRQ_Sy:

; 668  : 		} else if (lowQ.count > 0 && lowT<1){

  0007d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _lowQ, 0
  00084	7e 22		 jle	 SHORT $LN6@Psp_IRQ_Sy
  00086	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _lowT, 1
  0008d	73 19		 jae	 SHORT $LN6@Psp_IRQ_Sy

; 669  : 			lowT++;

  0008f	a1 00 00 00 00	 mov	 eax, DWORD PTR _lowT
  00094	83 c0 01	 add	 eax, 1
  00097	a3 00 00 00 00	 mov	 DWORD PTR _lowT, eax

; 670  : 			current_schedule_priority = PRIORITY_LOW;

  0009c	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR _current_schedule_priority, 2

; 671  : 		} else{

  000a6	eb 52		 jmp	 SHORT $LN9@Psp_IRQ_Sy
$LN6@Psp_IRQ_Sy:

; 672  : 			// 모두 배정받은 CPU 타임을 수행한 경우로 다시 초기화 해준다.
; 673  : 			highT = 0;

  000a8	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _highT, 0

; 674  : 			normalT = 0;

  000b2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _normalT, 0

; 675  : 			lowT = 0;

  000bc	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _lowT, 0

; 676  : 
; 677  : 			if(highQ.count != 0)

  000c6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _highQ, 0
  000cd	74 0c		 je	 SHORT $LN4@Psp_IRQ_Sy

; 678  : 				current_schedule_priority = PRIORITY_HIGH;

  000cf	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _current_schedule_priority, 0
  000d9	eb 1f		 jmp	 SHORT $LN9@Psp_IRQ_Sy
$LN4@Psp_IRQ_Sy:

; 679  : 			else if(normalQ.count != 0)

  000db	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _normalQ, 0
  000e2	74 0c		 je	 SHORT $LN2@Psp_IRQ_Sy

; 680  : 				current_schedule_priority = PRIORITY_NORMAL;

  000e4	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _current_schedule_priority, 1

; 681  : 			else

  000ee	eb 0a		 jmp	 SHORT $LN9@Psp_IRQ_Sy
$LN2@Psp_IRQ_Sy:

; 682  : 				current_schedule_priority = PRIORITY_LOW;

  000f0	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR _current_schedule_priority, 2
$LN9@Psp_IRQ_Sy:

; 683  : 		}
; 684  : 		// !!!!!!!!
; 685  : 		PspSetupTaskSWEnv(); //태스크 스위칭

  000fa	e8 00 00 00 00	 call	 _PspSetupTaskSWEnv

; 686  : 		WRITE_PORT_UCHAR((PUCHAR)0x20, 0x20); //EOI신호를 전송

  000ff	6a 20		 push	 32			; 00000020H
  00101	6a 20		 push	 32			; 00000020H
  00103	e8 00 00 00 00	 call	 _WRITE_PORT_UCHAR
  00108	83 c4 08	 add	 esp, 8

; 687  : 
; 688  : 		_asm iretd

  0010b	cf		 iretd

; 689  : 	}

  0010c	e9 f8 fe ff ff	 jmp	 $LN12@Psp_IRQ_Sy
$LN11@Psp_IRQ_Sy:

; 690  : 
; 691  : 	return 0;

  00111	33 c0		 xor	 eax, eax

; 692  : }

  00113	5f		 pop	 edi
  00114	5e		 pop	 esi
  00115	5b		 pop	 ebx
  00116	8b e5		 mov	 esp, ebp
  00118	5d		 pop	 ebp
  00119	c3		 ret	 0
_Psp_IRQ_SystemTimer ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _PspPushScheduleData
_TEXT	SEGMENT
_scheduleData$ = -8					; size = 4
_bResult$ = -4						; size = 4
_pQueue$ = 8						; size = 4
_data$ = 12						; size = 4
_PspPushScheduleData PROC				; COMDAT

; 750  : static BOOL PspPushScheduleData(PRIORITY_QUEUE *pQueue, HANDLE data){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 751  : 	BOOL bResult = TRUE;

  00009	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _bResult$[ebp], 1

; 752  : 	PRIORITY_QUEUE_DATA *scheduleData;
; 753  : ENTER_CRITICAL_SECTION();

  00010	9c		 pushfd
  00011	fa		 cli

; 754  : 	{
; 755  : 		scheduleData = MmAllocateNonCachedMemory(sizeof(PRIORITY_QUEUE_DATA));

  00012	6a 08		 push	 8
  00014	e8 00 00 00 00	 call	 _MmAllocateNonCachedMemory
  00019	83 c4 04	 add	 esp, 4
  0001c	89 45 f8	 mov	 DWORD PTR _scheduleData$[ebp], eax

; 756  : 		scheduleData->next = NULL;

  0001f	8b 45 f8	 mov	 eax, DWORD PTR _scheduleData$[ebp]
  00022	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 757  : 		scheduleData->thread = data;

  00029	8b 45 f8	 mov	 eax, DWORD PTR _scheduleData$[ebp]
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _data$[ebp]
  0002f	89 08		 mov	 DWORD PTR [eax], ecx

; 758  : 
; 759  : 		if(pQueue->front == NULL){

  00031	8b 45 08	 mov	 eax, DWORD PTR _pQueue$[ebp]
  00034	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00038	75 14		 jne	 SHORT $LN2@PspPushSch

; 760  : 			pQueue->end = scheduleData;

  0003a	8b 45 08	 mov	 eax, DWORD PTR _pQueue$[ebp]
  0003d	8b 4d f8	 mov	 ecx, DWORD PTR _scheduleData$[ebp]
  00040	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 761  : 			pQueue->front = scheduleData;

  00043	8b 45 08	 mov	 eax, DWORD PTR _pQueue$[ebp]
  00046	8b 4d f8	 mov	 ecx, DWORD PTR _scheduleData$[ebp]
  00049	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 762  : 		} else{

  0004c	eb 15		 jmp	 SHORT $LN1@PspPushSch
$LN2@PspPushSch:

; 763  : 			pQueue->end->next = scheduleData;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _pQueue$[ebp]
  00051	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00054	8b 55 f8	 mov	 edx, DWORD PTR _scheduleData$[ebp]
  00057	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 764  : 			pQueue->end = scheduleData;

  0005a	8b 45 08	 mov	 eax, DWORD PTR _pQueue$[ebp]
  0005d	8b 4d f8	 mov	 ecx, DWORD PTR _scheduleData$[ebp]
  00060	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN1@PspPushSch:

; 765  : 		}
; 766  : 
; 767  : 		pQueue->count++;

  00063	8b 45 08	 mov	 eax, DWORD PTR _pQueue$[ebp]
  00066	8b 08		 mov	 ecx, DWORD PTR [eax]
  00068	83 c1 01	 add	 ecx, 1
  0006b	8b 55 08	 mov	 edx, DWORD PTR _pQueue$[ebp]
  0006e	89 0a		 mov	 DWORD PTR [edx], ecx
$$exit$1304:

; 768  : 	}
; 769  : $exit:
; 770  : EXIT_CRITICAL_SECTION();

  00070	9d		 popfd

; 771  : 	
; 772  : 	return bResult;

  00071	8b 45 fc	 mov	 eax, DWORD PTR _bResult$[ebp]

; 773  : 
; 774  : }

  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	5b		 pop	 ebx
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
_PspPushScheduleData ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _PspPopScheduleData
_TEXT	SEGMENT
_scheduleData$ = -8					; size = 4
_bResult$ = -4						; size = 4
_pQueue$ = 8						; size = 4
_pdata$ = 12						; size = 4
_PspPopScheduleData PROC				; COMDAT

; 775  : static BOOL PspPopScheduleData(PRIORITY_QUEUE *pQueue, HANDLE *pdata){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 776  : 	BOOL bResult = TRUE;

  00009	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _bResult$[ebp], 1

; 777  : 	PRIORITY_QUEUE_DATA *scheduleData;
; 778  : ENTER_CRITICAL_SECTION();

  00010	9c		 pushfd
  00011	fa		 cli

; 779  : 	{
; 780  : 		if(pQueue->count == 0){

  00012	8b 45 08	 mov	 eax, DWORD PTR _pQueue$[ebp]
  00015	83 38 00	 cmp	 DWORD PTR [eax], 0
  00018	75 09		 jne	 SHORT $LN1@PspPopSche

; 781  : 			bResult = FALSE;

  0001a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _bResult$[ebp], 0

; 782  : 			goto $exit;

  00021	eb 3e		 jmp	 SHORT $$exit$1313
$LN1@PspPopSche:

; 783  : 		} // 큐가 비어있는지 체크, 비어있으면 팝 불가
; 784  : 		
; 785  : 		*pdata = pQueue->front->thread;

  00023	8b 45 08	 mov	 eax, DWORD PTR _pQueue$[ebp]
  00026	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00029	8b 55 0c	 mov	 edx, DWORD PTR _pdata$[ebp]
  0002c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002e	89 02		 mov	 DWORD PTR [edx], eax

; 786  : 
; 787  : 		scheduleData = pQueue->front->next;

  00030	8b 45 08	 mov	 eax, DWORD PTR _pQueue$[ebp]
  00033	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00036	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00039	89 55 f8	 mov	 DWORD PTR _scheduleData$[ebp], edx

; 788  : 		MmFreeNonCachedMemory((PVOID) pQueue->front);

  0003c	8b 45 08	 mov	 eax, DWORD PTR _pQueue$[ebp]
  0003f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00042	51		 push	 ecx
  00043	e8 00 00 00 00	 call	 _MmFreeNonCachedMemory
  00048	83 c4 04	 add	 esp, 4

; 789  : 		pQueue->front = scheduleData;

  0004b	8b 45 08	 mov	 eax, DWORD PTR _pQueue$[ebp]
  0004e	8b 4d f8	 mov	 ecx, DWORD PTR _scheduleData$[ebp]
  00051	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 790  : 		pQueue->count--;

  00054	8b 45 08	 mov	 eax, DWORD PTR _pQueue$[ebp]
  00057	8b 08		 mov	 ecx, DWORD PTR [eax]
  00059	83 e9 01	 sub	 ecx, 1
  0005c	8b 55 08	 mov	 edx, DWORD PTR _pQueue$[ebp]
  0005f	89 0a		 mov	 DWORD PTR [edx], ecx
$$exit$1313:

; 791  : 	}
; 792  : $exit:
; 793  : EXIT_CRITICAL_SECTION();

  00061	9d		 popfd

; 794  : 	return bResult;

  00062	8b 45 fc	 mov	 eax, DWORD PTR _bResult$[ebp]

; 795  : }

  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
_PspPopScheduleData ENDP
_TEXT	ENDS
END
