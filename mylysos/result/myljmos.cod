; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.42 

	TITLE	c:\Develop\MyljmOS\myljmos.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BB@CINOICC@Booting?5Error?$CB?$AN?6?$AA@	; `string'
PUBLIC	??_C@_0CK@NNIAHEIK@HshInitializeShell?$CI?$CJ?5returned?5an@ ; `string'
PUBLIC	??_C@_0DD@GHBOJMFM@Floppy?5Disk?5Driver?5is?5initialize@ ; `string'
PUBLIC	??_C@_0CL@LECLFJDL@FddInitializeDriver?$CI?$CJ?5returned?5a@ ; `string'
PUBLIC	??_C@_0DA@BAJDKHNK@Keyboard?5Driver?5is?5initialized?5s@ ; `string'
PUBLIC	??_C@_0CL@BBHNNJJA@KbdInitializeDriver?$CI?$CJ?5returned?5a@ ; `string'
PUBLIC	??_C@_0CL@EKIIKDMP@KrnInitializeKernel?$CI?$CJ?5returned?5a@ ; `string'
PUBLIC	_myljmos_init
EXTRN	_HshInitializeShell:PROC
EXTRN	_FddInitializeDriver:PROC
EXTRN	_CrtPrintf:PROC
EXTRN	_KbdInitializeDriver:PROC
EXTRN	_KrnInitializeKernel:PROC
EXTRN	_CrtInitializeDriver:PROC
;	COMDAT ??_C@_0BB@CINOICC@Booting?5Error?$CB?$AN?6?$AA@
; File c:\develop\myljmos\myljmos.c
CONST	SEGMENT
??_C@_0BB@CINOICC@Booting?5Error?$CB?$AN?6?$AA@ DB 'Booting Error!', 0dH, 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@NNIAHEIK@HshInitializeShell?$CI?$CJ?5returned?5an@
CONST	SEGMENT
??_C@_0CK@NNIAHEIK@HshInitializeShell?$CI?$CJ?5returned?5an@ DB 'HshIniti'
	DB	'alizeShell() returned an error.', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@GHBOJMFM@Floppy?5Disk?5Driver?5is?5initialize@
CONST	SEGMENT
??_C@_0DD@GHBOJMFM@Floppy?5Disk?5Driver?5is?5initialize@ DB 'Floppy Disk '
	DB	'Driver is initialized successfully!!', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@LECLFJDL@FddInitializeDriver?$CI?$CJ?5returned?5a@
CONST	SEGMENT
??_C@_0CL@LECLFJDL@FddInitializeDriver?$CI?$CJ?5returned?5a@ DB 'FddIniti'
	DB	'alizeDriver() returned an error.', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@BAJDKHNK@Keyboard?5Driver?5is?5initialized?5s@
CONST	SEGMENT
??_C@_0DA@BAJDKHNK@Keyboard?5Driver?5is?5initialized?5s@ DB 'Keyboard Dri'
	DB	'ver is initialized successfully!!', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@BBHNNJJA@KbdInitializeDriver?$CI?$CJ?5returned?5a@
CONST	SEGMENT
??_C@_0CL@BBHNNJJA@KbdInitializeDriver?$CI?$CJ?5returned?5a@ DB 'KbdIniti'
	DB	'alizeDriver() returned an error.', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@EKIIKDMP@KrnInitializeKernel?$CI?$CJ?5returned?5a@
CONST	SEGMENT
??_C@_0CL@EKIIKDMP@KrnInitializeKernel?$CI?$CJ?5returned?5a@ DB 'KrnIniti'
	DB	'alizeKernel() returned an error.', 0dH, 0aH, 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT _myljmos_init
_TEXT	SEGMENT
_myljmos_init PROC					; COMDAT

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12   : 	 //콘솔 시스템 초기화 함수 호출
; 13   :    if(!CrtInitializeDriver())

  00009	e8 00 00 00 00	 call	 _CrtInitializeDriver
  0000e	85 c0		 test	 eax, eax
  00010	75 0a		 jne	 SHORT $LN5@myljmos_in

; 14   :    {
; 15   :       halt(NULL);

  00012	6a 00		 push	 0
  00014	e8 00 00 00 00	 call	 _halt
  00019	83 c4 04	 add	 esp, 4
$LN5@myljmos_in:

; 16   :    }
; 17   :    
; 18   :    //커널 초기화 루틴의 호출
; 19   :    if(!KrnInitializeKernel())

  0001c	e8 00 00 00 00	 call	 _KrnInitializeKernel
  00021	85 c0		 test	 eax, eax
  00023	75 0d		 jne	 SHORT $LN4@myljmos_in

; 20   :    {
; 21   : 	   halt("KrnInitializeKernel() returned an error.\r\n");

  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@EKIIKDMP@KrnInitializeKernel?$CI?$CJ?5returned?5a@
  0002a	e8 00 00 00 00	 call	 _halt
  0002f	83 c4 04	 add	 esp, 4
$LN4@myljmos_in:

; 22   :    }
; 23   : 
; 24   :    //키보드 디바이스 드라이버 초기화 함수 호출
; 25   :    if(!KbdInitializeDriver())

  00032	e8 00 00 00 00	 call	 _KbdInitializeDriver
  00037	85 c0		 test	 eax, eax
  00039	75 0d		 jne	 SHORT $LN3@myljmos_in

; 26   :    {
; 27   : 	   halt("KbdInitializeDriver() returned an error.\r\n");

  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@BBHNNJJA@KbdInitializeDriver?$CI?$CJ?5returned?5a@
  00040	e8 00 00 00 00	 call	 _halt
  00045	83 c4 04	 add	 esp, 4
$LN3@myljmos_in:

; 28   :    }
; 29   : 
; 30   :    CrtPrintf("Keyboard Driver is initialized successfully!!\r\n");

  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@BAJDKHNK@Keyboard?5Driver?5is?5initialized?5s@
  0004d	e8 00 00 00 00	 call	 _CrtPrintf
  00052	83 c4 04	 add	 esp, 4

; 31   : 
; 32   : 	//플로피 디스크 디바이스 드라이버 초기화 함수 호출
; 33   :    if(!FddInitializeDriver())

  00055	e8 00 00 00 00	 call	 _FddInitializeDriver
  0005a	85 c0		 test	 eax, eax
  0005c	75 0d		 jne	 SHORT $LN2@myljmos_in

; 34   :    {
; 35   : 	   halt("FddInitializeDriver() returned an error.\r\n");

  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@LECLFJDL@FddInitializeDriver?$CI?$CJ?5returned?5a@
  00063	e8 00 00 00 00	 call	 _halt
  00068	83 c4 04	 add	 esp, 4
$LN2@myljmos_in:

; 36   :    }
; 37   :    CrtPrintf("Floppy Disk Driver is initialized successfully!!\r\n");

  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@GHBOJMFM@Floppy?5Disk?5Driver?5is?5initialize@
  00070	e8 00 00 00 00	 call	 _CrtPrintf
  00075	83 c4 04	 add	 esp, 4

; 38   : 	
; 39   :    //쉘 초기화 함수
; 40   : 	if(!HshInitializeShell())

  00078	e8 00 00 00 00	 call	 _HshInitializeShell
  0007d	85 c0		 test	 eax, eax
  0007f	75 0d		 jne	 SHORT $LN1@myljmos_in

; 41   : 	{
; 42   : 		halt("HshInitializeShell() returned an error.\r\n");

  00081	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@NNIAHEIK@HshInitializeShell?$CI?$CJ?5returned?5an@
  00086	e8 00 00 00 00	 call	 _halt
  0008b	83 c4 04	 add	 esp, 4
$LN1@myljmos_in:

; 43   : 	}
; 44   : 
; 45   :    //첫 태스크 스위칭 설정
; 46   :    _asm {
; 47   : 	   push   eax

  0008e	50		 push	 eax

; 48   : 
; 49   : 	   pushfd

  0008f	9c		 pushfd

; 50   : 	   pop    eax

  00090	58		 pop	 eax

; 51   : 	   or     ah, 40h ; nested

  00091	80 cc 40	 or	 ah, 64			; 00000040H

; 52   : 	   push   eax

  00094	50		 push	 eax

; 53   : 	   popfd

  00095	9d		 popfd

; 54   : 
; 55   : 	   pop   eax

  00096	58		 pop	 eax

; 56   : 	   iretd

  00097	cf		 iretd

; 57   :    }
; 58   : 
; 59   :    
; 60   :    //만약 초기화 실패시, 이 부분 실행 (전체 시스템 정지)
; 61   :    halt("Booting Error!\r\n");

  00098	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@CINOICC@Booting?5Error?$CB?$AN?6?$AA@
  0009d	e8 00 00 00 00	 call	 _halt
  000a2	83 c4 04	 add	 esp, 4

; 62   :    return 0;

  000a5	33 c0		 xor	 eax, eax

; 63   : }

  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
_myljmos_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@CPDHJIFL@Halting?5system?4?$AN?6?$AA@	; `string'
;	COMDAT ??_C@_0BC@CPDHJIFL@Halting?5system?4?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BC@CPDHJIFL@Halting?5system?4?$AN?6?$AA@ DB 'Halting system.', 0dH
	DB	0aH, 00H					; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT _halt
_TEXT	SEGMENT
_pMsg$ = 8						; size = 4
_halt	PROC						; COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 68   :    if(pMsg !=NULL){

  00009	83 7d 08 00	 cmp	 DWORD PTR _pMsg$[ebp], 0
  0000d	74 19		 je	 SHORT $LN2@halt

; 69   :       DbgPrint(pMsg);

  0000f	8b 45 08	 mov	 eax, DWORD PTR _pMsg$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _CrtPrintf
  00018	83 c4 04	 add	 esp, 4

; 70   :       DbgPrint("Halting system.\r\n");

  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CPDHJIFL@Halting?5system?4?$AN?6?$AA@
  00020	e8 00 00 00 00	 call	 _CrtPrintf
  00025	83 c4 04	 add	 esp, 4
$LN2@halt:

; 71   :    }
; 72   :    while(1);

  00028	b8 01 00 00 00	 mov	 eax, 1
  0002d	85 c0		 test	 eax, eax
  0002f	74 02		 je	 SHORT $LN4@halt
  00031	eb f5		 jmp	 SHORT $LN2@halt
$LN4@halt:

; 73   : 
; 74   : }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
_halt	ENDP
_TEXT	ENDS
END
